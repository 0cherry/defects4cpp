From 19ec6af4ccc0e5f1bf765b6cd841d36d92505c44 Mon Sep 17 00:00:00 2001
From: haku <gentlebuuny@gmail.com>
Date: Fri, 16 Jul 2021 11:05:18 +0900
Subject: [PATCH] split tests

---
 tests/aiff_rw_test.c          |   6 +
 tests/alaw_test.c             |   6 +
 tests/channel_test.c          |   9 +-
 tests/checksum_test.c         |   6 +
 tests/chunk_test.c            |  42 ++-
 tests/command_test.c          | 134 ++++++-
 tests/compression_size_test.c |  16 +-
 tests/cpp_test.cc             |  15 +
 tests/defects4cpp.h           |  12 +
 tests/defects4cpp.lua         |   1 +
 tests/dither_test.c           |  87 ++++-
 tests/dwvw_test.c             |  10 +
 tests/error_test.c            |  19 +-
 tests/external_libs_test.c    |  13 +-
 tests/fix_this.c              |   6 +
 tests/format_check_test.c     |   8 +
 tests/headerless_test.c       |  14 +
 tests/largefile_test.c        |   8 +
 tests/locale_test.c           |   8 +
 tests/long_read_write_test.c  |  14 +-
 tests/lossy_comp_test.c       | 640 ++++++++++++++++++++++++++++++++--
 tests/misc_test.c             | 134 ++++++-
 tests/multi_file_test.c       |  23 +-
 tests/ogg_test.c              |   6 +
 tests/peak_chunk_test.c       |  30 +-
 tests/raw_test.c              |   8 +
 tests/sftest.c                |   6 +
 tests/stdin_test.c            | 100 +++++-
 tests/string_test.c           |  82 ++++-
 tests/ulaw_test.c             |   6 +
 tests/virtual_io_test.c       |  12 +
 tests/win32_ordinal_test.c    |   6 +
 tests/win32_test.c            |   6 +
 33 files changed, 1381 insertions(+), 112 deletions(-)
 create mode 100644 tests/defects4cpp.h
 create mode 100644 tests/defects4cpp.lua

diff --git a/tests/aiff_rw_test.c b/tests/aiff_rw_test.c
index 54eec4ba..7f088812 100644
--- a/tests/aiff_rw_test.c
+++ b/tests/aiff_rw_test.c
@@ -33,6 +33,7 @@
 #include <sndfile.h>
 
 #include "utils.h"
+#include "defects4cpp.h"
 
 
 static unsigned char aifc_data [] =
@@ -101,7 +102,12 @@ main (void)
 
 	dump_data_to_file (filename, aifc_data, sizeof (aifc_data)) ;
 
+	switch (defects4cpp_test_index ())
+	{
+		case 1:
 	rw_test (filename) ;
+			break ;
+	}
 
 	unlink (filename) ;
 
diff --git a/tests/alaw_test.c b/tests/alaw_test.c
index b928083c..32360c59 100644
--- a/tests/alaw_test.c
+++ b/tests/alaw_test.c
@@ -31,6 +31,7 @@
 #include <sndfile.h>
 
 #include "utils.h"
+#include "defects4cpp.h"
 
 #define	BUFFER_SIZE		(65536)
 
@@ -53,6 +54,9 @@ main (void)
 
 	sf_info_setup (&sfinfo, SF_FORMAT_RAW | SF_FORMAT_ALAW, 44100, 1) ;
 
+	switch (defects4cpp_test_index ())
+	{
+		case 2:
 	if ((file = sf_open (filename, SFM_WRITE, &sfinfo)) == NULL)
 	{	printf ("sf_open_write failed with error : ") ;
 		fflush (stdout) ;
@@ -146,6 +150,8 @@ main (void)
 
 	unlink (filename) ;
 
+			break ;
+	}
 	return 0 ;
 } /* main */
 
diff --git a/tests/channel_test.c b/tests/channel_test.c
index a69cd32d..7c6a8041 100644
--- a/tests/channel_test.c
+++ b/tests/channel_test.c
@@ -36,6 +36,7 @@
 #include <sndfile.h>
 
 #include "utils.h"
+#include "defects4cpp.h"
 
 #define	BUFFER_LEN		(1 << 10)
 #define LOG_BUFFER_SIZE	1024
@@ -45,7 +46,13 @@ static	double	max_diff		(const float *a, const float *b, unsigned int len, unsig
 
 int
 main (void) // int argc, char *argv [])
-{	channel_test () ;
+{
+	switch (defects4cpp_test_index ())
+	{
+		case 3:
+	channel_test () ;
+			break ;
+	}
 	return 0 ;
 } /* main */
 
diff --git a/tests/checksum_test.c b/tests/checksum_test.c
index 4b37b3d3..965efdb3 100644
--- a/tests/checksum_test.c
+++ b/tests/checksum_test.c
@@ -26,6 +26,7 @@
 #include <sndfile.h>
 
 #include "utils.h"
+#include "defects4cpp.h"
 
 #define	SAMPLE_RATE	8000
 
@@ -71,8 +72,13 @@ main (void)
 
 	gen_windowed_sine_float (orig, ARRAY_LEN (orig), 0.9) ;
 
+	switch (defects4cpp_test_index ())
+	{
+		case 4:
 	for (k = 0 ; k < ARRAY_LEN (checksum_orig) ; k++)
 		checksum_test (&checksum_orig [k]) ;
+			break ;
+	}
 
 	return 0 ;
 } /* main */
diff --git a/tests/chunk_test.c b/tests/chunk_test.c
index ed340643..00f5892f 100644
--- a/tests/chunk_test.c
+++ b/tests/chunk_test.c
@@ -33,6 +33,7 @@
 
 #include	"sfendian.h"
 #include	"utils.h"
+#include	"defects4cpp.h"
 
 #define	BUFFER_LEN			(1 << 10)
 #define LOG_BUFFER_SIZE		1024
@@ -59,32 +60,61 @@ main (int argc, char *argv [])
 
 	do_all = ! strcmp (argv [1], "all") ;
 
+	int index = defects4cpp_test_index () ;
 	if (do_all || ! strcmp (argv [1], "wav"))
-	{	chunk_test ("chunks_pcm16.wav", SF_FORMAT_WAV | SF_FORMAT_PCM_16) ;
+	{ switch (index)
+		{
+			case 5:
+		chunk_test ("chunks_pcm16.wav", SF_FORMAT_WAV | SF_FORMAT_PCM_16) ;
+				break ;
+			case 6:
 		chunk_test ("chunks_pcm16.rifx", SF_ENDIAN_BIG | SF_FORMAT_WAV | SF_FORMAT_PCM_16) ;
+				break ;
+			case 7:
 		chunk_test ("chunks_pcm16.wavex", SF_FORMAT_WAVEX | SF_FORMAT_PCM_16) ;
-
 		for (k = 100 ; k < 10000 ; k *= 4)
 			wav_subchunk_test (k) ;
-
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || ! strcmp (argv [1], "aiff"))
-	{	chunk_test ("chunks_pcm16.aiff", SF_FORMAT_AIFF | SF_FORMAT_PCM_16) ;
+	{	switch (index)
+		{
+			case 8:
+		chunk_test ("chunks_pcm16.aiff", SF_FORMAT_AIFF | SF_FORMAT_PCM_16) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || ! strcmp (argv [1], "caf"))
-	{	chunk_test ("chunks_pcm16.caf", SF_FORMAT_CAF | SF_FORMAT_PCM_16) ;
+	{	switch (index)
+		{
+			case 9:
+		chunk_test ("chunks_pcm16.caf", SF_FORMAT_CAF | SF_FORMAT_PCM_16) ;
+				break ;
+			case 10:
 		chunk_test ("chunks_alac.caf", SF_FORMAT_CAF | SF_FORMAT_ALAC_16) ;
+				break ;
+			case 11:
 		large_free_test ("large_free.caf", SF_FORMAT_CAF | SF_FORMAT_PCM_16, 100) ;
+				break ;
+			case 12:
 		large_free_test ("large_free.caf", SF_FORMAT_CAF | SF_FORMAT_PCM_16, 20000) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || ! strcmp (argv [1], "rf64"))
-	{	chunk_test ("chunks_pcm16.rf64", SF_FORMAT_RF64 | SF_FORMAT_PCM_16) ;
+	{	switch (index)
+		{
+			case 13:
+		chunk_test ("chunks_pcm16.rf64", SF_FORMAT_RF64 | SF_FORMAT_PCM_16) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
diff --git a/tests/command_test.c b/tests/command_test.c
index c3e7c860..5b009f88 100644
--- a/tests/command_test.c
+++ b/tests/command_test.c
@@ -37,6 +37,7 @@
 
 #include "sfendian.h"
 #include "utils.h"
+#include "defects4cpp.h"
 
 #define	BUFFER_LEN		(1 << 10)
 #define LOG_BUFFER_SIZE	1024
@@ -96,9 +97,13 @@ main (int argc, char *argv [])
 
 	do_all = ! strcmp (argv [1], "all") ;
 
+	int index = defects4cpp_test_index () ;
 	if (do_all || strcmp (argv [1], "ver") == 0)
 	{	char buffer [128] ;
 
+		switch (index)
+		{
+			case 14:
 		print_test_name ("version_test", "(none)") ;
 		buffer [0] = 0 ;
 		sf_command (NULL, SFC_GET_LIB_VERSION, buffer, sizeof (buffer)) ;
@@ -107,6 +112,8 @@ main (int argc, char *argv [])
 			exit (1) ;
 			} ;
 		puts ("ok") ;
+				break ;
+		}
 		test_count ++ ;
 		} ;
 
@@ -114,88 +121,191 @@ main (int argc, char *argv [])
 	{	/*	Preliminary float/double normalisation tests. More testing
 		**	is done in the program 'floating_point_test'.
 		*/
+		switch (index)
+		{
+			case 15:
 		float_norm_test		("float.wav") ;
+				break ;
+			case 16:
 		double_norm_test	("double.wav") ;
+				break ;
+		}
 		test_count ++ ;
 		} ;
 
 	if (do_all || strcmp (argv [1], "peak") == 0)
-	{	calc_peak_test (SF_ENDIAN_BIG		| SF_FORMAT_RAW, "be-peak.raw", 1) ;
+	{	switch (index)
+		{
+			case 17:
+		calc_peak_test (SF_ENDIAN_BIG		| SF_FORMAT_RAW, "be-peak.raw", 1) ;
+				break ;
+			case 18:
 		calc_peak_test (SF_ENDIAN_LITTLE	| SF_FORMAT_RAW, "le-peak.raw", 1) ;
+				break ;
+			case 19:
 		calc_peak_test (SF_ENDIAN_BIG		| SF_FORMAT_RAW, "be-peak.raw", 7) ;
+				break ;
+			case 20:
 		calc_peak_test (SF_ENDIAN_LITTLE	| SF_FORMAT_RAW, "le-peak.raw", 7) ;
+				break ;
+		}
 		test_count ++ ;
 		} ;
 
 	if (do_all || ! strcmp (argv [1], "format"))
-	{	format_tests () ;
+	{	switch (index)
+		{
+			case 21:
+		format_tests () ;
+				break ;
+		}
 		test_count ++ ;
 		} ;
 
 	if (do_all || strcmp (argv [1], "trunc") == 0)
-	{	truncate_test ("truncate.raw", SF_FORMAT_RAW | SF_FORMAT_PCM_32) ;
+	{	switch (index)
+		{
+			case 22:
+		truncate_test ("truncate.raw", SF_FORMAT_RAW | SF_FORMAT_PCM_32) ;
+				break ;
+			case 23:
 		truncate_test ("truncate.au" , SF_FORMAT_AU | SF_FORMAT_PCM_16) ;
+				break ;
+		}
 		test_count ++ ;
 		} ;
 
 	if (do_all || strcmp (argv [1], "inst") == 0)
-	{	instrument_test ("instrument.wav", SF_FORMAT_WAV | SF_FORMAT_PCM_16) ;
-		/*-instrument_test ("instrument.aiff" , SF_FORMAT_AIFF | SF_FORMAT_PCM_24) ;-*/
+	{	switch (index)
+		{
+			case 24:
+		instrument_test ("instrument.wav", SF_FORMAT_WAV | SF_FORMAT_PCM_16) ;
+				break ;
+		}
 		/*-instrument_test ("instrument.xi", SF_FORMAT_XI | SF_FORMAT_DPCM_16) ;-*/
 		test_count ++ ;
 		} ;
 
 	if (do_all || strcmp (argv [1], "cue") == 0)
-	{	cue_test ("cue.wav", SF_FORMAT_WAV | SF_FORMAT_PCM_16) ;
+	{	switch (index)
+		{
+			case 25:
+		cue_test ("cue.wav", SF_FORMAT_WAV | SF_FORMAT_PCM_16) ;
+				break ;
+			case 26:
 		cue_test ("cue.aiff" , SF_FORMAT_AIFF | SF_FORMAT_PCM_24) ;
+				break ;
+		}
 		test_count ++ ;
 		} ;
 
 	if (do_all || strcmp (argv [1], "current_sf_info") == 0)
-	{	current_sf_info_test ("current.wav") ;
+	{	switch (index)
+		{
+			case 27:
+		current_sf_info_test ("current.wav") ;
+				break ;
+		}
 		test_count ++ ;
 		} ;
 
 	if (do_all || strcmp (argv [1], "bext") == 0)
-	{	broadcast_test ("broadcast.wav", SF_FORMAT_WAV | SF_FORMAT_PCM_16) ;
+	{	switch (index)
+		{
+			case 28:
+		broadcast_test ("broadcast.wav", SF_FORMAT_WAV | SF_FORMAT_PCM_16) ;
+				break ;
+			case 29:
 		broadcast_rdwr_test	("broadcast.wav", SF_FORMAT_WAV | SF_FORMAT_PCM_16) ;
 
+				break ;
+			case 30:
 		broadcast_test ("broadcast.wavex", SF_FORMAT_WAVEX | SF_FORMAT_PCM_16) ;
+				break ;
+			case 31:
 		broadcast_rdwr_test	("broadcast.wavex", SF_FORMAT_WAVEX | SF_FORMAT_PCM_16) ;
 
+				break ;
+			case 32:
 		broadcast_test ("broadcast.rf64", SF_FORMAT_RF64 | SF_FORMAT_PCM_16) ;
+				break ;
+			case 33:
 		broadcast_rdwr_test	("broadcast.rf64", SF_FORMAT_RF64 | SF_FORMAT_PCM_16) ;
+				break ;
+		}
 		test_count ++ ;
 		} ;
 
 	if (do_all || strcmp (argv [1], "cart") == 0)
-	{	cart_test ("cart.wav", SF_FORMAT_WAV | SF_FORMAT_PCM_16) ;
+	{	switch (index)
+		{
+			case 34:
+		cart_test ("cart.wav", SF_FORMAT_WAV | SF_FORMAT_PCM_16) ;
+				break ;
+			case 35:
 		cart_rdwr_test ("cart.wav", SF_FORMAT_WAV | SF_FORMAT_PCM_16) ;
+				break ;
+			case 36:
 		cart_test ("cart.rf64", SF_FORMAT_RF64 | SF_FORMAT_PCM_16) ;
+				break ;
+			case 37:
 		cart_rdwr_test ("cart.rf64", SF_FORMAT_RF64 | SF_FORMAT_PCM_16) ;
+				break ;
+		}
 		test_count ++ ;
 		} ;
 
 	if (do_all || strcmp (argv [1], "bextch") == 0)
-	{	broadcast_coding_history_test ("coding_history.wav") ;
+	{	switch (index)
+		{
+			case 38:
+		broadcast_coding_history_test ("coding_history.wav") ;
+				break ;
+			case 39:
 		broadcast_coding_history_size ("coding_hist_size.wav") ;
+				break ;
+		}
 		test_count ++ ;
 		} ;
 
 	if (do_all || strcmp (argv [1], "chanmap") == 0)
-	{	channel_map_test ("chanmap.wavex", SF_FORMAT_WAVEX | SF_FORMAT_PCM_16) ;
+	{	switch (index)
+		{
+			case 40:
+		channel_map_test ("chanmap.wavex", SF_FORMAT_WAVEX | SF_FORMAT_PCM_16) ;
+				break ;
+			case 41:
 		channel_map_test ("chanmap.rf64", SF_FORMAT_RF64 | SF_FORMAT_PCM_16) ;
+				break ;
+			case 42:
 		channel_map_test ("chanmap.aifc" , SF_FORMAT_AIFF | SF_FORMAT_PCM_16) ;
+				break ;
+			case 43:
 		channel_map_test ("chanmap.caf" , SF_FORMAT_CAF | SF_FORMAT_PCM_16) ;
+				break ;
+		}
 		test_count ++ ;
 		} ;
 
 	if (do_all || strcmp (argv [1], "rawend") == 0)
-	{	raw_needs_endswap_test ("raw_end.wav", SF_FORMAT_WAV) ;
+	{	switch (index)
+		{
+			case 44:
+		raw_needs_endswap_test ("raw_end.wav", SF_FORMAT_WAV) ;
+				break ;
+			case 45:
 		raw_needs_endswap_test ("raw_end.wavex", SF_FORMAT_WAVEX) ;
+				break ;
+			case 46:
 		raw_needs_endswap_test ("raw_end.rifx", SF_ENDIAN_BIG | SF_FORMAT_WAV) ;
+				break ;
+			case 47:
 		raw_needs_endswap_test ("raw_end.aiff", SF_FORMAT_AIFF) ;
+				break ;
+			case 48:
 		raw_needs_endswap_test ("raw_end.aiff_le", SF_ENDIAN_LITTLE | SF_FORMAT_AIFF) ;
+				break ;
+		}
 		test_count ++ ;
 		} ;
 
diff --git a/tests/compression_size_test.c b/tests/compression_size_test.c
index aee17f28..74a3790e 100644
--- a/tests/compression_size_test.c
+++ b/tests/compression_size_test.c
@@ -33,6 +33,7 @@
 
 #include	"utils.h"
 #include	"dft_cmp.h"
+#include	"defects4cpp.h"
 
 #define	SAMPLE_RATE		16000
 #define	DATA_LENGTH		(SAMPLE_RATE)
@@ -190,14 +191,25 @@ main (int argc, char *argv [])
 	if (strcmp (argv [1], "all") == 0)
 		all_tests = 1 ;
 
+	int index = defects4cpp_test_index () ;
 	if (all_tests || strcmp (argv [1], "vorbis") == 0)
-	{	vorbis_test () ;
+	{	switch (index)
+		{
+			case 49:
+		vorbis_test () ;
 		compression_size_test (SF_FORMAT_OGG | SF_FORMAT_VORBIS, "vorbis.oga") ;
+				break ;
+		}
 		tests ++ ;
 		} ;
 
 	if (all_tests || strcmp (argv [1], "flac") == 0)
-	{	compression_size_test (SF_FORMAT_FLAC | SF_FORMAT_PCM_16, "pcm16.flac") ;
+	{	switch (index)
+		{
+			case 50:
+		compression_size_test (SF_FORMAT_FLAC | SF_FORMAT_PCM_16, "pcm16.flac") ;
+				break ;
+		}
 		tests ++ ;
 		} ;
 
diff --git a/tests/cpp_test.cc b/tests/cpp_test.cc
index 6e39da6d..6d617abe 100644
--- a/tests/cpp_test.cc
+++ b/tests/cpp_test.cc
@@ -25,6 +25,7 @@
 #include <sndfile.hh>
 
 #include "utils.h"
+#include "defects4cpp.h"
 
 static short	sbuffer [100] ;
 static int 		ibuffer [100] ;
@@ -301,14 +302,28 @@ ceeplusplus_handle_test (const char *filename, int format)
 int
 main (void)
 {
+	switch (defects4cpp_test_index()) {
+		case 51:
 	ceeplusplus_test ("cpp_test.wav", SF_FORMAT_WAV | SF_FORMAT_PCM_16) ;
+			break;
+		case 52:
 	ceeplusplus_test ("cpp_test.aiff", SF_FORMAT_AIFF | SF_FORMAT_PCM_S8) ;
+			break;
+		case 53:
 	ceeplusplus_test ("cpp_test.au", SF_FORMAT_AU | SF_FORMAT_FLOAT) ;
+			break;
+		case 54:
 
 	ceeplusplus_extra_test () ;
+			break;
+		case 55:
 	ceeplusplus_handle_test ("cpp_test.wav", SF_FORMAT_WAV | SF_FORMAT_PCM_16) ;
 
+			break;
+		case 56:
 	ceeplusplus_wchar_test () ;
+			break;
+	}
 
 	return 0 ;
 } /* main */
diff --git a/tests/defects4cpp.h b/tests/defects4cpp.h
new file mode 100644
index 00000000..648dc63d
--- /dev/null
+++ b/tests/defects4cpp.h
@@ -0,0 +1,12 @@
+#include <lua5.3/lauxlib.h>
+#include <lua5.3/lualib.h>
+
+static int defects4cpp_test_index ()
+{
+	lua_State *L = luaL_newstate () ;
+	luaL_openlibs (L) ;
+	luaL_dofile (L, "tests/defects4cpp.lua") ;
+	int ret = lua_tonumber (L, -1) ;
+	lua_close (L) ;
+	return ret ;
+}
diff --git a/tests/defects4cpp.lua b/tests/defects4cpp.lua
new file mode 100644
index 00000000..a4325f62
--- /dev/null
+++ b/tests/defects4cpp.lua
@@ -0,0 +1 @@
+return 1
diff --git a/tests/dither_test.c b/tests/dither_test.c
index c0928440..1e9918f8 100644
--- a/tests/dither_test.c
+++ b/tests/dither_test.c
@@ -31,6 +31,7 @@
 #include	<sndfile.h>
 
 #include	"utils.h"
+#include	"defects4cpp.h"
 
 #define	BUFFER_LEN		(1 << 16)
 #define LOG_BUFFER_SIZE	1024
@@ -58,63 +59,123 @@ main (int argc, char *argv [])
 
 	do_all = ! strcmp (argv [1], "all") ;
 
+	int index = defects4cpp_test_index () ;
 	if (do_all || ! strcmp (argv [1], "wav"))
-	{	dither_test ("dither.wav", SF_FORMAT_WAV | SF_FORMAT_PCM_U8) ;
+	{	switch (index)
+		{
+			case 57:
+		dither_test ("dither.wav", SF_FORMAT_WAV | SF_FORMAT_PCM_U8) ;
+				break ;
+	}
 		test_count++ ;
 		} ;
-
 	if (do_all || ! strcmp (argv [1], "aiff"))
-	{	dither_test ("dither.aiff", SF_FORMAT_AIFF | SF_FORMAT_PCM_S8) ;
+	{	switch (index)
+		{
+			case 58:
+		dither_test ("dither.aiff", SF_FORMAT_AIFF | SF_FORMAT_PCM_S8) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || ! strcmp (argv [1], "au"))
-	{	dither_test ("dither.au", SF_FORMAT_AU | SF_FORMAT_PCM_S8) ;
+	{	switch (index)
+		{
+			case 59:
+		dither_test ("dither.au", SF_FORMAT_AU | SF_FORMAT_PCM_S8) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || ! strcmp (argv [1], "svx"))
-	{	dither_test ("dither.svx", SF_FORMAT_SVX | SF_FORMAT_PCM_S8) ;
+	{	switch (index)
+		{
+			case 60:
+		dither_test ("dither.svx", SF_FORMAT_SVX | SF_FORMAT_PCM_S8) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || ! strcmp (argv [1], "nist"))
-	{	dither_test ("dither.nist", SF_FORMAT_NIST | SF_FORMAT_PCM_S8) ;
+	{	switch (index)
+		{
+			case 61:
+		dither_test ("dither.nist", SF_FORMAT_NIST | SF_FORMAT_PCM_S8) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || ! strcmp (argv [1], "paf"))
-	{	dither_test ("dither.paf", SF_FORMAT_PAF | SF_FORMAT_PCM_S8) ;
+	{	switch (index)
+		{
+			case 62:
+		dither_test ("dither.paf", SF_FORMAT_PAF | SF_FORMAT_PCM_S8) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || ! strcmp (argv [1], "ircam"))
-	{	dither_test ("dither.ircam", SF_FORMAT_IRCAM | SF_FORMAT_PCM_S8) ;
+	{	switch (index)
+		{
+			case 63:
+		dither_test ("dither.ircam", SF_FORMAT_IRCAM | SF_FORMAT_PCM_S8) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || ! strcmp (argv [1], "voc"))
-	{	dither_test ("dither.voc", SF_FORMAT_VOC | SF_FORMAT_PCM_S8) ;
+	{	switch (index)
+		{
+			case 64:
+		dither_test ("dither.voc", SF_FORMAT_VOC | SF_FORMAT_PCM_S8) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || ! strcmp (argv [1], "w64"))
-	{	dither_test ("dither.w64", SF_FORMAT_W64 | SF_FORMAT_PCM_S8) ;
+	{	switch (index)
+		{
+			case 65:
+		dither_test ("dither.w64", SF_FORMAT_W64 | SF_FORMAT_PCM_S8) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || ! strcmp (argv [1], "mat4"))
-	{	dither_test ("dither.mat4", SF_FORMAT_MAT4 | SF_FORMAT_PCM_S8) ;
+	{	switch (index)
+		{
+			case 66:
+		dither_test ("dither.mat4", SF_FORMAT_MAT4 | SF_FORMAT_PCM_S8) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || ! strcmp (argv [1], "mat5"))
-	{	dither_test ("dither.mat5", SF_FORMAT_MAT5 | SF_FORMAT_PCM_S8) ;
+	{	switch (index)
+		{
+			case 67:
+		dither_test ("dither.mat5", SF_FORMAT_MAT5 | SF_FORMAT_PCM_S8) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || ! strcmp (argv [1], "pvf"))
-	{	dither_test ("dither.pvf", SF_FORMAT_PVF | SF_FORMAT_PCM_S8) ;
+	{	switch (index)
+		{
+			case 68:
+		dither_test ("dither.pvf", SF_FORMAT_PVF | SF_FORMAT_PCM_S8) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
diff --git a/tests/dwvw_test.c b/tests/dwvw_test.c
index b2cae067..70c1ee5d 100644
--- a/tests/dwvw_test.c
+++ b/tests/dwvw_test.c
@@ -32,6 +32,7 @@
 #include <sndfile.h>
 
 #include "utils.h"
+#include "defects4cpp.h"
 
 #define	BUFFER_SIZE		(10000)
 
@@ -44,9 +45,18 @@ static	void	dwvw_test (const char *filename, int format, int bit_width) ;
 int
 main (void)
 {
+	switch (defects4cpp_test_index ())
+	{
+		case 69:
 	dwvw_test ("dwvw12.raw", SF_FORMAT_RAW | SF_FORMAT_DWVW_12, 12) ;
+			break ;
+		case 70:
 	dwvw_test ("dwvw16.raw", SF_FORMAT_RAW | SF_FORMAT_DWVW_16, 16) ;
+			break ;
+		case 71:
 	dwvw_test ("dwvw24.raw", SF_FORMAT_RAW | SF_FORMAT_DWVW_24, 24) ;
+			break ;
+	}
 
 	return 0 ;
 } /* main */
diff --git a/tests/error_test.c b/tests/error_test.c
index 2e348e47..aaa0f2b9 100644
--- a/tests/error_test.c
+++ b/tests/error_test.c
@@ -36,6 +36,7 @@
 #include <sndfile.h>
 
 #include "utils.h"
+#include "defects4cpp.h"
 
 #define	BUFFER_SIZE		(1 << 15)
 #define	SHORT_BUFFER	(256)
@@ -271,16 +272,32 @@ unrecognised_test (void)
 int
 main (void)
 {
+	switch (defects4cpp_test_index ())
+	{
+		case 72:
 	error_number_test () ;
+			break ;
+		case 73:
 	error_value_test () ;
 
+			break ;
+		case 74:
 	error_close_test () ;
 
+			break ;
+		case 75:
 	no_file_test ("no_file.wav") ;
+			break ;
+		case 76:
 	zero_length_test ("zero_length.wav") ;
+			break ;
+		case 77:
 	bad_wav_test ("bad_wav.wav") ;
-
+			break ;
+		case 78:
 	unrecognised_test () ;
+			break ;
+	}
 
 	return 0 ;
 } /* main */
diff --git a/tests/external_libs_test.c b/tests/external_libs_test.c
index d41075df..4680c30e 100644
--- a/tests/external_libs_test.c
+++ b/tests/external_libs_test.c
@@ -32,6 +32,7 @@
 #include <sndfile.h>
 
 #include "utils.h"
+#include "defects4cpp.h"
 
 static void major_format_test (void) ;
 static void subtype_format_test (void) ;
@@ -41,12 +42,22 @@ static void flac_subset_test (void) ;
 int
 main (void)
 {
+	switch (defects4cpp_test_index ())
+	{
+		case 79:
 	major_format_test () ;
+			break ;
+		case 80:
 	subtype_format_test () ;
+			break ;
+		case 81:
 	simple_format_test () ;
-
+			break ;
+		case 82:
 	if (HAVE_EXTERNAL_XIPH_LIBS)
 		flac_subset_test () ;
+			break ;
+	}
 
 	return 0 ;
 } /* main */
diff --git a/tests/fix_this.c b/tests/fix_this.c
index 5c697ea8..5571d2a1 100644
--- a/tests/fix_this.c
+++ b/tests/fix_this.c
@@ -32,6 +32,7 @@
 #include <sndfile.h>
 
 #include "utils.h"
+#include "defects4cpp.h"
 
 #define		BUFFER_SIZE		(1 << 14)
 #define		SAMPLE_RATE		(11025)
@@ -63,7 +64,12 @@ int
 main (void)
 {	const char	*filename = "test.au" ;
 
+	switch (defects4cpp_test_index ())
+	{
+		case 83:
 	lcomp_test_int	("au_g721", filename, SF_ENDIAN_BIG | SF_FORMAT_AU | SF_FORMAT_G721_32, 0.06) ;
+			break ;
+	}
 
 	return 0 ;
 } /* main */
diff --git a/tests/format_check_test.c b/tests/format_check_test.c
index 98bdbb64..c0dfd8be 100644
--- a/tests/format_check_test.c
+++ b/tests/format_check_test.c
@@ -30,6 +30,7 @@
 
 #include "sndfile.h"
 #include "utils.h"
+#include "defects4cpp.h"
 
 static void format_error_test (void) ;
 static void format_combo_test (void) ;
@@ -37,8 +38,15 @@ static void format_combo_test (void) ;
 int
 main (void)
 {
+	switch (defects4cpp_test_index ())
+	{
+		case 84:
 	format_error_test () ;
+			break ;
+		case 85:
 	format_combo_test () ;
+			break ;
+	}
 
 	return 0 ;
 } /* main */
diff --git a/tests/headerless_test.c b/tests/headerless_test.c
index 059fa683..8368755c 100644
--- a/tests/headerless_test.c
+++ b/tests/headerless_test.c
@@ -33,6 +33,7 @@
 #include <sndfile.h>
 
 #include "utils.h"
+#include "defects4cpp.h"
 
 #define	BUFFER_SIZE		(2000)
 
@@ -42,13 +43,26 @@ static void headerless_test (const char * filename, int format, int expected) ;
 int
 main (void)
 {
+	switch (defects4cpp_test_index ())
+	{
+		case 86:
 	old_test () ;
 
+			break ;
+		case 87:
 	headerless_test ("raw.vox", SF_FORMAT_VOX_ADPCM, SF_FORMAT_RAW | SF_FORMAT_VOX_ADPCM) ;
+			break ;
+		case 88:
 	headerless_test ("raw.gsm", SF_FORMAT_GSM610, SF_FORMAT_RAW | SF_FORMAT_GSM610) ;
+			break ;
+		case 89:
 
 	headerless_test ("raw.snd", SF_FORMAT_ULAW, SF_FORMAT_RAW | SF_FORMAT_ULAW) ;
+			break ;
+		case 90:
 	headerless_test ("raw.au" , SF_FORMAT_ULAW, SF_FORMAT_RAW | SF_FORMAT_ULAW) ;
+			break ;
+	}
 
 	return 0 ;
 } /* main */
diff --git a/tests/largefile_test.c b/tests/largefile_test.c
index 4c97c90b..4e20e431 100644
--- a/tests/largefile_test.c
+++ b/tests/largefile_test.c
@@ -31,6 +31,7 @@
 #include <sndfile.h>
 
 #include "utils.h"
+#include "defects4cpp.h"
 
 #define	BUFFER_LEN		(1024 * 1024)
 #define	BUFFER_COUNT	(768)
@@ -40,8 +41,15 @@ static void largefile_test (int filetype, const char * filename) ;
 int
 main (void)
 {
+	switch (defects4cpp_test_index ())
+	{
+		case 91:
 	largefile_test (SF_FORMAT_WAV, "largefile.wav") ;
+			break ;
+		case 92:
 	largefile_test (SF_FORMAT_AIFF, "largefile.aiff") ;
+			break ;
+	}
 
 	return 0 ;
 } /* main */
diff --git a/tests/locale_test.c b/tests/locale_test.c
index b2653016..d2963c1c 100644
--- a/tests/locale_test.c
+++ b/tests/locale_test.c
@@ -39,6 +39,7 @@
 
 #include "sndfile.h"
 #include "utils.h"
+#include "defects4cpp.h"
 
 static void utf8_test (void) ;
 static void wchar_test (void) ;
@@ -46,8 +47,15 @@ static void wchar_test (void) ;
 int
 main (void)
 {
+	switch (defects4cpp_test_index ())
+	{
+		case 93:
 	utf8_test () ;
+			break ;
+		case 94:
 	wchar_test () ;
+			break ;
+	}
 
 	return 0 ;
 } /* main */
diff --git a/tests/long_read_write_test.c b/tests/long_read_write_test.c
index 48624687..55b380d7 100644
--- a/tests/long_read_write_test.c
+++ b/tests/long_read_write_test.c
@@ -34,6 +34,7 @@
 
 #include "dft_cmp.h"
 #include "utils.h"
+#include "defects4cpp.h"
 
 #define	BUFFER_LENGTH		10000
 #define	SAMPLE_RATE			44010
@@ -73,10 +74,21 @@ main (int argc, char *argv [])
 	do_all = ! strcmp (argv [1], "all") ;
 
 	if (do_all || strcmp (argv [1], "alac") == 0)
-	{	short_lrw_test	("alac.caf", SF_FORMAT_CAF | SF_FORMAT_ALAC_16, short_data, ARRAY_LEN (short_data)) ;
+	{	switch (defects4cpp_test_index ())
+		{
+			case 95:
+		short_lrw_test	("alac.caf", SF_FORMAT_CAF | SF_FORMAT_ALAC_16, short_data, ARRAY_LEN (short_data)) ;
+				break ;
+			case 96:
 		int_lrw_test	("alac.caf", SF_FORMAT_CAF | SF_FORMAT_ALAC_32, int_data, ARRAY_LEN (int_data)) ;
+				break ;
+			case 97:
 		float_lrw_test	("alac.caf", SF_FORMAT_CAF | SF_FORMAT_ALAC_32, float_data, ARRAY_LEN (float_data)) ;
+				break ;
+			case 98:
 		double_lrw_test	("alac.caf", SF_FORMAT_CAF | SF_FORMAT_ALAC_32, double_data, ARRAY_LEN (double_data)) ;
+				break ;
+		}
 		} ;
 
 	return 0 ;
diff --git a/tests/lossy_comp_test.c b/tests/lossy_comp_test.c
index 4ada5bc6..de95b3b4 100644
--- a/tests/lossy_comp_test.c
+++ b/tests/lossy_comp_test.c
@@ -34,6 +34,7 @@
 #include <sndfile.h>
 
 #include "utils.h"
+#include "defects4cpp.h"
 
 #define	BUFFER_SIZE		(1 << 14)
 #define	SAMPLE_RATE		11025
@@ -113,222 +114,483 @@ main (int argc, char *argv [])
 
 	do_all = ! strcmp (argv [1], "all") ;
 
+	int index = defects4cpp_test_index () ;
+
 	if (do_all || strcmp (argv [1], "wav_pcm") == 0)
 	{	/* This is just a sanity test for PCM encoding. */
+		switch (index)
+		{
+			case 99:
 		lcomp_test_short	("pcm.wav", SF_FORMAT_WAV | SF_FORMAT_PCM_16, 2, 1e-50) ;
+				break ;
+			case 100:
 		lcomp_test_int		("pcm.wav", SF_FORMAT_WAV | SF_FORMAT_PCM_32, 2, 1e-50) ;
+				break ;
+			case 101:
 		lcomp_test_short	("pcm.rifx", SF_ENDIAN_BIG | SF_FORMAT_WAV | SF_FORMAT_PCM_16, 2, 1e-50) ;
+				break ;
+			case 102:
 		lcomp_test_int		("pcm.rifx", SF_ENDIAN_BIG | SF_FORMAT_WAV | SF_FORMAT_PCM_32, 2, 1e-50) ;
+				break ;
+			case 103:
 		/* Lite remove start */
 		lcomp_test_float	("pcm.wav", SF_FORMAT_WAV | SF_FORMAT_FLOAT, 2, 1e-50) ;
+				break ;
+			case 104:
 		lcomp_test_double	("pcm.wav", SF_FORMAT_WAV | SF_FORMAT_DOUBLE, 2, 1e-50) ;
+				break ;
+			case 105:
 		/* Lite remove end */
 
 		read_raw_test ("pcm.wav", SF_FORMAT_WAV | SF_FORMAT_PCM_U8, 2) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	/* For all the rest, if the file format supports more than 1 channel, use stereo. */
 	/* Lite remove start */
 	if (do_all || strcmp (argv [1], "wav_ima") == 0)
-	{	lcomp_test_short	("ima.wav", SF_FORMAT_WAV | SF_FORMAT_IMA_ADPCM, 2, 0.18) ;
+	{	switch (index)
+		{
+			case 106:
+		lcomp_test_short	("ima.wav", SF_FORMAT_WAV | SF_FORMAT_IMA_ADPCM, 2, 0.18) ;
+				break ;
+			case 107:
 		lcomp_test_int		("ima.wav", SF_FORMAT_WAV | SF_FORMAT_IMA_ADPCM, 2, 0.65) ;
+				break ;
+			case 108:
 		lcomp_test_float	("ima.wav", SF_FORMAT_WAV | SF_FORMAT_IMA_ADPCM, 2, 0.18) ;
+				break ;
+			case 109:
 		lcomp_test_double	("ima.wav", SF_FORMAT_WAV | SF_FORMAT_IMA_ADPCM, 2, 0.18) ;
 
+				break ;
+			case 110:
 		lcomp_test_short	("ima.rifx", SF_ENDIAN_BIG | SF_FORMAT_WAV | SF_FORMAT_IMA_ADPCM, 2, 0.18) ;
+				break ;
+			case 111:
 		lcomp_test_int		("ima.rifx", SF_ENDIAN_BIG | SF_FORMAT_WAV | SF_FORMAT_IMA_ADPCM, 2, 0.18) ;
+				break ;
+			case 112:
 		lcomp_test_float	("ima.rifx", SF_ENDIAN_BIG | SF_FORMAT_WAV | SF_FORMAT_IMA_ADPCM, 2, 0.18) ;
+				break ;
+			case 113:
 		lcomp_test_double	("ima.rifx", SF_ENDIAN_BIG | SF_FORMAT_WAV | SF_FORMAT_IMA_ADPCM, 2, 0.18) ;
 
+				break ;
+			case 114:
 		sdlcomp_test_short	("ima.wav", SF_FORMAT_WAV | SF_FORMAT_IMA_ADPCM, 2, 0.18) ;
+				break ;
+			case 115:
 		sdlcomp_test_int	("ima.wav", SF_FORMAT_WAV | SF_FORMAT_IMA_ADPCM, 2, 0.18) ;
+				break ;
+			case 116:
 		sdlcomp_test_float	("ima.wav", SF_FORMAT_WAV | SF_FORMAT_IMA_ADPCM, 2, 0.18) ;
+				break ;
+			case 117:
 		sdlcomp_test_double	("ima.wav", SF_FORMAT_WAV | SF_FORMAT_IMA_ADPCM, 2, 0.18) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || strcmp (argv [1], "wav_msadpcm") == 0)
-	{	lcomp_test_short	("msadpcm.wav", SF_FORMAT_WAV | SF_FORMAT_MS_ADPCM, 2, 0.36) ;
+	{	switch (index)
+		{
+			case 118:
+		lcomp_test_short	("msadpcm.wav", SF_FORMAT_WAV | SF_FORMAT_MS_ADPCM, 2, 0.36) ;
+				break ;
+			case 119:
 		lcomp_test_int		("msadpcm.wav", SF_FORMAT_WAV | SF_FORMAT_MS_ADPCM, 2, 0.36) ;
+				break ;
+			case 120:
 		lcomp_test_float	("msadpcm.wav", SF_FORMAT_WAV | SF_FORMAT_MS_ADPCM, 2, 0.36) ;
+				break ;
+			case 121:
 		lcomp_test_double	("msadpcm.wav", SF_FORMAT_WAV | SF_FORMAT_MS_ADPCM, 2, 0.36) ;
 
+				break ;
+			case 122:
 		lcomp_test_short	("msadpcm.rifx", SF_ENDIAN_BIG | SF_FORMAT_WAV | SF_FORMAT_MS_ADPCM, 2, 0.36) ;
+				break ;
+			case 123:
 		lcomp_test_int		("msadpcm.rifx", SF_ENDIAN_BIG | SF_FORMAT_WAV | SF_FORMAT_MS_ADPCM, 2, 0.36) ;
+				break ;
+			case 124:
 		lcomp_test_float	("msadpcm.rifx", SF_ENDIAN_BIG | SF_FORMAT_WAV | SF_FORMAT_MS_ADPCM, 2, 0.36) ;
+				break ;
+			case 125:
 		lcomp_test_double	("msadpcm.rifx", SF_ENDIAN_BIG | SF_FORMAT_WAV | SF_FORMAT_MS_ADPCM, 2, 0.36) ;
 
+				break ;
+			case 126:
 		sdlcomp_test_short	("msadpcm.wav", SF_FORMAT_WAV | SF_FORMAT_MS_ADPCM, 2, 0.36) ;
+				break ;
+			case 127:
 		sdlcomp_test_int	("msadpcm.wav", SF_FORMAT_WAV | SF_FORMAT_MS_ADPCM, 2, 0.36) ;
+				break ;
+			case 128:
 		sdlcomp_test_float	("msadpcm.wav", SF_FORMAT_WAV | SF_FORMAT_MS_ADPCM, 2, 0.36) ;
+				break ;
+			case 129:
 		sdlcomp_test_double	("msadpcm.wav", SF_FORMAT_WAV | SF_FORMAT_MS_ADPCM, 2, 0.36) ;
+				break ;
+		}
 
 		test_count++ ;
 		} ;
 
 	if (do_all || strcmp (argv [1], "wav_g721") == 0)
 	{	printf ("**** Fix this later : error bound should be 0.06 ****\n") ;
+		switch (index)
+		{
+			case 130:
 		lcomp_test_short	("g721.wav", SF_FORMAT_WAV | SF_FORMAT_G721_32, 1, 0.7) ;
+				break ;
+			case 131:
 		lcomp_test_int		("g721.wav", SF_FORMAT_WAV | SF_FORMAT_G721_32, 1, 0.7) ;
 
+				break ;
+			case 132:
 		lcomp_test_short	("g721.rifx", SF_ENDIAN_BIG | SF_FORMAT_WAV | SF_FORMAT_G721_32, 1, 0.7) ;
+				break ;
+			case 133:
 		lcomp_test_int		("g721.rifx", SF_ENDIAN_BIG | SF_FORMAT_WAV | SF_FORMAT_G721_32, 1, 0.7) ;
+				break ;
+		}
 
 		test_count++ ;
 		} ;
 	/* Lite remove end */
 
 	if (do_all || strcmp (argv [1], "wav_ulaw") == 0)
-	{	lcomp_test_short	("ulaw.wav", SF_FORMAT_WAV | SF_FORMAT_ULAW, 2, 0.04) ;
+	{	switch (index)
+		{
+			case 134:
+		lcomp_test_short	("ulaw.wav", SF_FORMAT_WAV | SF_FORMAT_ULAW, 2, 0.04) ;
+				break ;
+			case 135:
 		lcomp_test_int		("ulaw.wav", SF_FORMAT_WAV | SF_FORMAT_ULAW, 2, 0.04) ;
 
+				break ;
+			case 136:
 		lcomp_test_short	("ulaw.rifx", SF_ENDIAN_BIG | SF_FORMAT_WAV | SF_FORMAT_ULAW, 2, 0.04) ;
+				break ;
+			case 137:
 		lcomp_test_int		("ulaw.rifx", SF_ENDIAN_BIG | SF_FORMAT_WAV | SF_FORMAT_ULAW, 2, 0.04) ;
 
+				break ;
+			case 138:
 		/* Lite remove start */
 		lcomp_test_float	("ulaw.wav", SF_FORMAT_WAV | SF_FORMAT_ULAW, 2, 0.04) ;
+				break ;
+			case 139:
 		lcomp_test_double	("ulaw.wav", SF_FORMAT_WAV | SF_FORMAT_ULAW, 2, 0.04) ;
+				break ;
+			case 140:
 		/* Lite remove end */
 
 		read_raw_test ("ulaw.wav", SF_FORMAT_WAV | SF_FORMAT_ULAW, 2) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || strcmp (argv [1], "wav_alaw") == 0)
-	{	lcomp_test_short	("alaw.wav", SF_FORMAT_WAV | SF_FORMAT_ALAW, 2, 0.04) ;
+	{	switch (index)
+		{
+			case 141:
+		lcomp_test_short	("alaw.wav", SF_FORMAT_WAV | SF_FORMAT_ALAW, 2, 0.04) ;
+				break ;
+			case 142:
 		lcomp_test_int		("alaw.wav", SF_FORMAT_WAV | SF_FORMAT_ALAW, 2, 0.04) ;
+				break ;
+			case 143:
 		/* Lite remove start */
 		lcomp_test_float	("alaw.wav", SF_FORMAT_WAV | SF_FORMAT_ALAW, 2, 0.04) ;
+				break ;
+			case 144:
 		lcomp_test_double	("alaw.wav", SF_FORMAT_WAV | SF_FORMAT_ALAW, 2, 0.04) ;
+				break ;
+			case 145:
 		/* Lite remove end */
 
 		read_raw_test ("alaw.wav", SF_FORMAT_WAV | SF_FORMAT_ALAW, 2) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || strcmp (argv [1], "wav_gsm610") == 0)
 	{	/* Don't do lcomp_test_XXX as the errors are too big. */
+		switch (index)
+		{
+			case 146:
 		sdlcomp_test_short	("gsm610.wav", SF_FORMAT_WAV | SF_FORMAT_GSM610, 1, 0.24) ;
+				break ;
+			case 147:
 		sdlcomp_test_int	("gsm610.wav", SF_FORMAT_WAV | SF_FORMAT_GSM610, 1, 0.24) ;
 
+				break ;
+			case 148:
 		sdlcomp_test_short	("gsm610.rifx", SF_ENDIAN_BIG | SF_FORMAT_WAV | SF_FORMAT_GSM610, 1, 0.24) ;
+				break ;
+			case 149:
 		sdlcomp_test_int	("gsm610.rifx", SF_ENDIAN_BIG | SF_FORMAT_WAV | SF_FORMAT_GSM610, 1, 0.24) ;
 
+				break ;
+			case 150:
 		/* Lite remove start */
 		sdlcomp_test_float	("gsm610.wav", SF_FORMAT_WAV | SF_FORMAT_GSM610, 1, 0.24) ;
+				break ;
+			case 151:
 		sdlcomp_test_double	("gsm610.wav", SF_FORMAT_WAV | SF_FORMAT_GSM610, 1, 0.24) ;
 		/* Lite remove end */
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	/* Lite remove start */
 	if (do_all || strcmp (argv [1], "wav_nmsadpcm") == 0)
-	{	lcomp_test_short	("nms_16.wav", SF_FORMAT_WAV | SF_FORMAT_NMS_ADPCM_16, 1, 0.37) ;
+	{	switch (index)
+		{
+			case 152:
+		lcomp_test_short	("nms_16.wav", SF_FORMAT_WAV | SF_FORMAT_NMS_ADPCM_16, 1, 0.37) ;
+				break ;
+			case 153:
 		lcomp_test_int		("nms_16.wav", SF_FORMAT_WAV | SF_FORMAT_NMS_ADPCM_16, 1, 0.31) ;
+				break ;
+			case 154:
 		lcomp_test_float	("nms_16.wav", SF_FORMAT_WAV | SF_FORMAT_NMS_ADPCM_16, 1, 0.34) ;
+				break ;
+			case 155:
 		lcomp_test_double	("nms_16.wav", SF_FORMAT_WAV | SF_FORMAT_NMS_ADPCM_16, 1, 0.34) ;
 
+				break ;
+			case 156:
 		lcomp_test_short	("nms_24.wav", SF_FORMAT_WAV | SF_FORMAT_NMS_ADPCM_24, 1, 0.15) ;
+				break ;
+			case 157:
 		lcomp_test_int		("nms_24.wav", SF_FORMAT_WAV | SF_FORMAT_NMS_ADPCM_24, 1, 0.10) ;
+				break ;
+			case 158:
 		lcomp_test_float	("nms_24.wav", SF_FORMAT_WAV | SF_FORMAT_NMS_ADPCM_24, 1, 0.14) ;
+				break ;
+			case 159:
 		lcomp_test_double	("nms_24.wav", SF_FORMAT_WAV | SF_FORMAT_NMS_ADPCM_24, 1, 0.14) ;
 
+				break ;
+			case 160:
 		lcomp_test_short	("nms_32.wav", SF_FORMAT_WAV | SF_FORMAT_NMS_ADPCM_32, 1, 0.036) ;
+				break ;
+			case 161:
 		lcomp_test_int		("nms_32.wav", SF_FORMAT_WAV | SF_FORMAT_NMS_ADPCM_32, 1, 0.045) ;
+				break ;
+			case 162:
 		lcomp_test_float	("nms_32.wav", SF_FORMAT_WAV | SF_FORMAT_NMS_ADPCM_32, 1, 0.035) ;
+				break ;
+			case 163:
 		lcomp_test_double	("nms_32.wav", SF_FORMAT_WAV | SF_FORMAT_NMS_ADPCM_32, 1, 0.035) ;
 
+				break ;
+			case 164:
 		sdlcomp_test_short	("nms_16.wav", SF_FORMAT_WAV | SF_FORMAT_NMS_ADPCM_16, 1, 0.16) ;
+				break ;
+			case 165:
 		sdlcomp_test_int	("nms_16.wav", SF_FORMAT_WAV | SF_FORMAT_NMS_ADPCM_16, 1, 0.16) ;
+				break ;
+			case 166:
 		sdlcomp_test_float	("nms_16.wav", SF_FORMAT_WAV | SF_FORMAT_NMS_ADPCM_16, 1, 0.16) ;
+				break ;
+			case 167:
 		sdlcomp_test_double	("nms_16.wav", SF_FORMAT_WAV | SF_FORMAT_NMS_ADPCM_16, 1, 0.16) ;
 
+				break ;
+			case 168:
 		sdlcomp_test_short	("nms_24.wav", SF_FORMAT_WAV | SF_FORMAT_NMS_ADPCM_24, 1, 0.06) ;
+				break ;
+			case 169:
 		sdlcomp_test_int	("nms_24.wav", SF_FORMAT_WAV | SF_FORMAT_NMS_ADPCM_24, 1, 0.06) ;
+				break ;
+			case 170:
 		sdlcomp_test_float	("nms_24.wav", SF_FORMAT_WAV | SF_FORMAT_NMS_ADPCM_24, 1, 0.06) ;
+				break ;
+			case 171:
 		sdlcomp_test_double	("nms_24.wav", SF_FORMAT_WAV | SF_FORMAT_NMS_ADPCM_24, 1, 0.06) ;
 
+				break ;
+			case 172:
 		sdlcomp_test_short	("nms_32.wav", SF_FORMAT_WAV | SF_FORMAT_NMS_ADPCM_32, 1, 0.017) ;
+				break ;
+			case 173:
 		sdlcomp_test_int	("nms_32.wav", SF_FORMAT_WAV | SF_FORMAT_NMS_ADPCM_32, 1, 0.018) ;
+				break ;
+			case 174:
 		sdlcomp_test_float	("nms_32.wav", SF_FORMAT_WAV | SF_FORMAT_NMS_ADPCM_32, 1, 0.018) ;
+				break ;
+			case 175:
 		sdlcomp_test_double	("nms_32.wav", SF_FORMAT_WAV | SF_FORMAT_NMS_ADPCM_32, 1, 0.018) ;
+				break ;
+		}
 
 		test_count++ ;
 		} ;
 	/* Lite remove end */
 
 	if (do_all || strcmp (argv [1], "aiff_ulaw") == 0)
-	{	lcomp_test_short	("ulaw.aiff", SF_FORMAT_AIFF | SF_FORMAT_ULAW, 2, 0.04) ;
+	{	switch (index)
+		{
+			case 176:
+		lcomp_test_short	("ulaw.aiff", SF_FORMAT_AIFF | SF_FORMAT_ULAW, 2, 0.04) ;
+				break ;
+			case 177:
 		lcomp_test_int		("ulaw.aiff", SF_FORMAT_AIFF | SF_FORMAT_ULAW, 2, 0.04) ;
+				break ;
+			case 178:
 		/* Lite remove start */
 		lcomp_test_float	("ulaw.aiff", SF_FORMAT_AIFF | SF_FORMAT_ULAW, 2, 0.04) ;
+				break ;
+			case 179:
 		lcomp_test_double	("ulaw.aiff", SF_FORMAT_AIFF | SF_FORMAT_ULAW, 2, 0.04) ;
+				break ;
+			case 180:
 		/* Lite remove end */
 
 		read_raw_test ("ulaw.aiff", SF_FORMAT_AIFF | SF_FORMAT_ULAW, 2) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || strcmp (argv [1], "aiff_alaw") == 0)
-	{	lcomp_test_short	("alaw.aiff", SF_FORMAT_AIFF | SF_FORMAT_ALAW, 2, 0.04) ;
+	{	switch (index)
+		{
+			case 181:
+		lcomp_test_short	("alaw.aiff", SF_FORMAT_AIFF | SF_FORMAT_ALAW, 2, 0.04) ;
+				break ;
+			case 182:
 		lcomp_test_int		("alaw.aiff", SF_FORMAT_AIFF | SF_FORMAT_ALAW, 2, 0.04) ;
+				break ;
+			case 183:
 		/* Lite remove start */
 		lcomp_test_float	("alaw.aiff", SF_FORMAT_AIFF | SF_FORMAT_ALAW, 2, 0.04) ;
+				break ;
+			case 184:
 		lcomp_test_double	("alaw.aiff", SF_FORMAT_AIFF | SF_FORMAT_ALAW, 2, 0.04) ;
 		/* Lite remove end */
+				break ;
+			case 185:
 
 		read_raw_test ("alaw.aiff", SF_FORMAT_AIFF | SF_FORMAT_ALAW, 2) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || strcmp (argv [1], "aiff_gsm610") == 0)
 	{	/* Don't do lcomp_test_XXX as the errors are too big. */
+		switch (index)
+		{
+			case 186:
 		sdlcomp_test_short	("gsm610.aiff", SF_FORMAT_AIFF | SF_FORMAT_GSM610, 1, 0.24) ;
+				break ;
+			case 187:
 		sdlcomp_test_int	("gsm610.aiff", SF_FORMAT_AIFF | SF_FORMAT_GSM610, 1, 0.24) ;
+				break ;
+			case 188:
 		/* Lite remove start */
 		sdlcomp_test_float	("gsm610.aiff", SF_FORMAT_AIFF | SF_FORMAT_GSM610, 1, 0.24) ;
+				break ;
+			case 189:
 		sdlcomp_test_double	("gsm610.aiff", SF_FORMAT_AIFF | SF_FORMAT_GSM610, 1, 0.24) ;
 		/* Lite remove end */
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (strcmp (argv [1], "aiff_ima") == 0)
-	{	lcomp_test_short	("ima.aiff", SF_FORMAT_AIFF | SF_FORMAT_IMA_ADPCM, 2, 0.18) ;
+	{	switch (index)
+		{
+			case 190:
+		lcomp_test_short ("ima.aiff", SF_FORMAT_AIFF | SF_FORMAT_IMA_ADPCM, 2, 0.18) ;
+				break ;
+			case 191:
 		lcomp_test_int		("ima.aiff", SF_FORMAT_AIFF | SF_FORMAT_IMA_ADPCM, 2, 0.18) ;
+				break ;
+			case 192:
 		/* Lite remove start */
 		lcomp_test_float	("ima.aiff", SF_FORMAT_AIFF | SF_FORMAT_IMA_ADPCM, 2, 0.18) ;
+				break ;
+			case 193:
 		lcomp_test_double	("ima.aiff", SF_FORMAT_AIFF | SF_FORMAT_IMA_ADPCM, 2, 0.18) ;
 		/* Lite remove end */
+				break ;
+		}
 		} ;
 
 	if (do_all || strcmp (argv [1], "au_ulaw") == 0)
-	{	lcomp_test_short	("ulaw.au", SF_ENDIAN_BIG		| SF_FORMAT_AU | SF_FORMAT_ULAW, 2, 0.04) ;
+	{	switch (index)
+		{
+			case 194:
+		lcomp_test_short ("ulaw.au", SF_ENDIAN_BIG | SF_FORMAT_AU | SF_FORMAT_ULAW, 2, 0.04) ;
+				break ;
+			case 195:
 		lcomp_test_int		("ulaw.au", SF_ENDIAN_LITTLE	| SF_FORMAT_AU | SF_FORMAT_ULAW, 2, 0.04) ;
+				break ;
+			case 196:
 		/* Lite remove start */
 		lcomp_test_float	("ulaw.au", SF_ENDIAN_LITTLE	| SF_FORMAT_AU | SF_FORMAT_ULAW, 2, 0.04) ;
+				break ;
+			case 197:
 		lcomp_test_double	("ulaw.au", SF_ENDIAN_BIG		| SF_FORMAT_AU | SF_FORMAT_ULAW, 2, 0.04) ;
 		/* Lite remove end */
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || strcmp (argv [1], "au_alaw") == 0)
-	{	lcomp_test_short	("alaw.au", SF_ENDIAN_LITTLE	| SF_FORMAT_AU | SF_FORMAT_ALAW, 2, 0.04) ;
+	{	switch (index)
+		{
+			case 198:
+		lcomp_test_short ("alaw.au", SF_ENDIAN_LITTLE | SF_FORMAT_AU | SF_FORMAT_ALAW, 2, 0.04) ;
+				break ;
+			case 199:
 		lcomp_test_int		("alaw.au", SF_ENDIAN_BIG		| SF_FORMAT_AU | SF_FORMAT_ALAW, 2, 0.04) ;
+				break ;
+			case 200:
 		/* Lite remove start */
 		lcomp_test_float	("alaw.au", SF_ENDIAN_BIG		| SF_FORMAT_AU | SF_FORMAT_ALAW, 2, 0.04) ;
+				break ;
+			case 201:
 		lcomp_test_double	("alaw.au", SF_ENDIAN_LITTLE	| SF_FORMAT_AU | SF_FORMAT_ALAW, 2, 0.04) ;
 		/* Lite remove end */
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	/* Lite remove start */
 	if (do_all || strcmp (argv [1], "au_g721") == 0)
 	{	printf ("**** Fix this later : error bound should be 0.06 ****\n") ;
+		switch (index)
+		{
+			case 202:
 		lcomp_test_short	("g721.au", SF_ENDIAN_LITTLE	| SF_FORMAT_AU | SF_FORMAT_G721_32, 1, 0.7) ;
+				break ;
+			case 203:
 		lcomp_test_int		("g721.au", SF_ENDIAN_BIG		| SF_FORMAT_AU | SF_FORMAT_G721_32, 1, 0.7) ;
+				break ;
+			case 204:
 		lcomp_test_float	("g721.au", SF_ENDIAN_LITTLE 	| SF_FORMAT_AU | SF_FORMAT_G721_32, 1, 0.7) ;
+				break ;
+			case 205:
 		lcomp_test_double	("g721.au", SF_ENDIAN_BIG		| SF_FORMAT_AU | SF_FORMAT_G721_32, 1, 0.7) ;
+				break ;
+		}
 
 /*-		sdlcomp_test_short	("g721.au", SF_ENDIAN_BIG    | SF_FORMAT_AU | SF_FORMAT_G721_32, 1, 0.07) ;
 		sdlcomp_test_int	("g721.au", SF_ENDIAN_LITTLE | SF_FORMAT_AU | SF_FORMAT_G721_32, 1, 0.07) ;
@@ -340,15 +602,34 @@ main (int argc, char *argv [])
 
 	if (do_all || strcmp (argv [1], "au_g723") == 0)
 	{	printf ("**** Fix this later : error bound should be 0.16 ****\n") ;
+		switch (index)
+		{
+			case 206:
 		lcomp_test_short	("g723_24.au", SF_ENDIAN_LITTLE	| SF_FORMAT_AU | SF_FORMAT_G723_24, 1, 0.7) ;
+				break ;
+			case 207:
 		lcomp_test_int		("g723_24.au", SF_ENDIAN_BIG	| SF_FORMAT_AU | SF_FORMAT_G723_24, 1, 0.7) ;
+				break ;
+			case 208:
 		lcomp_test_float	("g723_24.au", SF_ENDIAN_LITTLE | SF_FORMAT_AU | SF_FORMAT_G723_24, 1, 0.7) ;
+				break ;
+			case 209:
 		lcomp_test_double	("g723_24.au", SF_ENDIAN_BIG	| SF_FORMAT_AU | SF_FORMAT_G723_24, 1, 0.7) ;
+				break ;
+			case 210:
 
 		lcomp_test_short	("g723_40.au", SF_ENDIAN_LITTLE | SF_FORMAT_AU | SF_FORMAT_G723_40, 1, 0.85) ;
+				break ;
+			case 211:
 		lcomp_test_int		("g723_40.au", SF_ENDIAN_BIG	| SF_FORMAT_AU | SF_FORMAT_G723_40, 1, 0.84) ;
+				break ;
+			case 212:
 		lcomp_test_float	("g723_40.au", SF_ENDIAN_LITTLE | SF_FORMAT_AU | SF_FORMAT_G723_40, 1, 0.86) ;
+				break ;
+			case 213:
 		lcomp_test_double	("g723_40.au", SF_ENDIAN_BIG	| SF_FORMAT_AU | SF_FORMAT_G723_40, 1, 0.86) ;
+				break ;
+		}
 
 /*-		sdlcomp_test_short	("g723.au", SF_ENDIAN_BIG    | SF_FORMAT_AU | SF_FORMAT_G723_24, 1, 0.15) ;
 		sdlcomp_test_int	("g723.au", SF_ENDIAN_LITTLE | SF_FORMAT_AU | SF_FORMAT_G723_24, 1, 0.15) ;
@@ -360,97 +641,210 @@ main (int argc, char *argv [])
 	/* Lite remove end */
 
 	if (do_all || strcmp (argv [1], "caf_ulaw") == 0)
-	{	lcomp_test_short	("ulaw.caf", SF_FORMAT_CAF | SF_FORMAT_ULAW, 2, 0.04) ;
+	{	switch (index)
+		{
+			case 214:
+		lcomp_test_short ("ulaw.caf", SF_FORMAT_CAF | SF_FORMAT_ULAW, 2, 0.04) ;
+				break ;
+			case 215:
 		lcomp_test_int		("ulaw.caf", SF_FORMAT_CAF | SF_FORMAT_ULAW, 2, 0.04) ;
+				break ;
+			case 216:
 		/* Lite remove start */
 		lcomp_test_float	("ulaw.caf", SF_FORMAT_CAF | SF_FORMAT_ULAW, 2, 0.04) ;
+				break ;
+			case 217:
 		lcomp_test_double	("ulaw.caf", SF_FORMAT_CAF | SF_FORMAT_ULAW, 2, 0.04) ;
 		/* Lite remove end */
+				break ;
+			case 218:
 
 		read_raw_test ("ulaw.caf", SF_FORMAT_CAF | SF_FORMAT_ULAW, 2) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || strcmp (argv [1], "caf_alaw") == 0)
-	{	lcomp_test_short	("alaw.caf", SF_FORMAT_CAF | SF_FORMAT_ALAW, 2, 0.04) ;
+	{	switch (index)
+		{
+			case 219:
+		lcomp_test_short ("alaw.caf", SF_FORMAT_CAF | SF_FORMAT_ALAW, 2, 0.04) ;
+				break ;
+			case 220:
 		lcomp_test_int		("alaw.caf", SF_FORMAT_CAF | SF_FORMAT_ALAW, 2, 0.04) ;
+				break ;
+			case 221:
 		/* Lite remove start */
 		lcomp_test_float	("alaw.caf", SF_FORMAT_CAF | SF_FORMAT_ALAW, 2, 0.04) ;
+				break ;
+			case 222:
 		lcomp_test_double	("alaw.caf", SF_FORMAT_CAF | SF_FORMAT_ALAW, 2, 0.04) ;
 		/* Lite remove end */
+				break ;
+			case 223:
 
 		read_raw_test ("alaw.caf", SF_FORMAT_CAF | SF_FORMAT_ALAW, 2) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 
 	if (do_all || strcmp (argv [1], "raw_ulaw") == 0)
-	{	lcomp_test_short	("ulaw.raw", SF_ENDIAN_LITTLE	| SF_FORMAT_RAW | SF_FORMAT_ULAW, 2, 0.04) ;
+	{	switch (index)
+		{
+			case 224:
+		lcomp_test_short ("ulaw.raw", SF_ENDIAN_LITTLE | SF_FORMAT_RAW | SF_FORMAT_ULAW, 2, 0.04) ;
+				break ;
+			case 225:
 		lcomp_test_int		("ulaw.raw", SF_ENDIAN_BIG		| SF_FORMAT_RAW | SF_FORMAT_ULAW, 2, 0.04) ;
+				break ;
+			case 226:
 		/* Lite remove start */
 		lcomp_test_float	("ulaw.raw", SF_ENDIAN_LITTLE	| SF_FORMAT_RAW | SF_FORMAT_ULAW, 2, 0.04) ;
+				break ;
+			case 227:
 		lcomp_test_double	("ulaw.raw", SF_ENDIAN_BIG		| SF_FORMAT_RAW | SF_FORMAT_ULAW, 2, 0.04) ;
 		/* Lite remove end */
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || strcmp (argv [1], "raw_alaw") == 0)
-	{	lcomp_test_short	("alaw.raw", SF_ENDIAN_LITTLE	| SF_FORMAT_RAW | SF_FORMAT_ALAW, 2, 0.04) ;
+	{	switch (index)
+		{
+			case 228:
+		lcomp_test_short	("alaw.raw", SF_ENDIAN_LITTLE	| SF_FORMAT_RAW | SF_FORMAT_ALAW, 2, 0.04) ;
+				break ;
+			case 229:
 		lcomp_test_int		("alaw.raw", SF_ENDIAN_BIG		| SF_FORMAT_RAW | SF_FORMAT_ALAW, 2, 0.04) ;
+				break ;
+			case 230:
 		/* Lite remove start */
 		lcomp_test_float	("alaw.raw", SF_ENDIAN_LITTLE	| SF_FORMAT_RAW | SF_FORMAT_ALAW, 2, 0.04) ;
+				break ;
+			case 231:
 		lcomp_test_double	("alaw.raw", SF_ENDIAN_BIG		| SF_FORMAT_RAW | SF_FORMAT_ALAW, 2, 0.04) ;
 		/* Lite remove end */
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || strcmp (argv [1], "raw_gsm610") == 0)
 	{	/* Don't do lcomp_test_XXX as the errors are too big. */
+		switch (index)
+		{
+			case 232:
 		sdlcomp_test_short	("raw.gsm", SF_FORMAT_RAW | SF_FORMAT_GSM610, 1, 0.24) ;
+				break ;
+			case 233:
 		sdlcomp_test_int	("raw.gsm", SF_FORMAT_RAW | SF_FORMAT_GSM610, 1, 0.24) ;
+				break ;
+			case 234:
 		sdlcomp_test_float	("raw.gsm", SF_FORMAT_RAW | SF_FORMAT_GSM610, 1, 0.24) ;
+				break ;
+			case 235:
 		sdlcomp_test_double	("raw.gsm", SF_FORMAT_RAW | SF_FORMAT_GSM610, 1, 0.24) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	/* Lite remove start */
 	if (do_all || strcmp (argv [1], "raw_nmsadpcm") == 0)
-	{	lcomp_test_short	("raw.vce16", SF_FORMAT_RAW | SF_FORMAT_NMS_ADPCM_16, 1, 0.37) ;
+	{	switch (index)
+		{
+			case 236:
 		lcomp_test_int		("raw.vce16", SF_FORMAT_RAW | SF_FORMAT_NMS_ADPCM_16, 1, 0.31) ;
+				break ;
+			case 237:
 		lcomp_test_float	("raw.vce16", SF_FORMAT_RAW | SF_FORMAT_NMS_ADPCM_16, 1, 0.34) ;
+				break ;
+			case 238:
 		lcomp_test_double	("raw.vce16", SF_FORMAT_RAW	| SF_FORMAT_NMS_ADPCM_16, 1, 0.34) ;
 
+				break ;
+			case 239:
 		lcomp_test_short	("raw.vce24", SF_FORMAT_RAW | SF_FORMAT_NMS_ADPCM_24, 1, 0.15) ;
+				break ;
+			case 240:
 		lcomp_test_int		("raw.vce24", SF_FORMAT_RAW | SF_FORMAT_NMS_ADPCM_24, 1, 0.10) ;
+				break ;
+			case 241:
 		lcomp_test_float	("raw.vce24", SF_FORMAT_RAW | SF_FORMAT_NMS_ADPCM_24, 1, 0.14) ;
+				break ;
+			case 242:
 		lcomp_test_double	("raw.vce24", SF_FORMAT_RAW	| SF_FORMAT_NMS_ADPCM_24, 1, 0.14) ;
 
+				break ;
+			case 243:
 		lcomp_test_short	("raw.vce32", SF_FORMAT_RAW | SF_FORMAT_NMS_ADPCM_32, 1, 0.036) ;
+				break ;
+			case 244:
 		lcomp_test_int		("raw.vce32", SF_FORMAT_RAW | SF_FORMAT_NMS_ADPCM_32, 1, 0.045) ;
+				break ;
+			case 245:
 		lcomp_test_float	("raw.vce32", SF_FORMAT_RAW | SF_FORMAT_NMS_ADPCM_32, 1, 0.035) ;
+				break ;
+			case 246:
 		lcomp_test_double	("raw.vce32", SF_FORMAT_RAW	| SF_FORMAT_NMS_ADPCM_32, 1, 0.035) ;
 
+				break ;
+			case 247:
+		lcomp_test_short	("raw.vce16", SF_FORMAT_RAW | SF_FORMAT_NMS_ADPCM_16, 1, 0.37) ;
+				break ;
+			case 248:
 		sdlcomp_test_short	("raw.vce16", SF_FORMAT_RAW | SF_FORMAT_NMS_ADPCM_16, 1, 0.16) ;
+				break ;
+			case 249:
 		sdlcomp_test_int	("raw.vce16", SF_FORMAT_RAW | SF_FORMAT_NMS_ADPCM_16, 1, 0.16) ;
+				break ;
+			case 250:
 		sdlcomp_test_float	("raw.vce16", SF_FORMAT_RAW | SF_FORMAT_NMS_ADPCM_16, 1, 0.16) ;
+				break ;
+			case 251:
 		sdlcomp_test_double	("raw.vce16", SF_FORMAT_RAW | SF_FORMAT_NMS_ADPCM_16, 1, 0.16) ;
 
+				break ;
+			case 252:
 		sdlcomp_test_short	("raw.vce24", SF_FORMAT_RAW | SF_FORMAT_NMS_ADPCM_24, 1, 0.06) ;
+				break ;
+			case 253:
 		sdlcomp_test_int	("raw.vce24", SF_FORMAT_RAW | SF_FORMAT_NMS_ADPCM_24, 1, 0.06) ;
+				break ;
+			case 254:
 		sdlcomp_test_float	("raw.vce24", SF_FORMAT_RAW | SF_FORMAT_NMS_ADPCM_24, 1, 0.06) ;
+				break ;
+			case 255:
 		sdlcomp_test_double	("raw.vce24", SF_FORMAT_RAW | SF_FORMAT_NMS_ADPCM_24, 1, 0.06) ;
 
+				break ;
+			case 256:
 		sdlcomp_test_short	("raw.vce32", SF_FORMAT_RAW | SF_FORMAT_NMS_ADPCM_32, 1, 0.017) ;
+				break ;
+			case 257:
 		sdlcomp_test_int	("raw.vce32", SF_FORMAT_RAW | SF_FORMAT_NMS_ADPCM_32, 1, 0.018) ;
+				break ;
+			case 258:
 		sdlcomp_test_float	("raw.vce32", SF_FORMAT_RAW | SF_FORMAT_NMS_ADPCM_32, 1, 0.018) ;
+				break ;
+			case 259:
 		sdlcomp_test_double	("raw.vce32", SF_FORMAT_RAW | SF_FORMAT_NMS_ADPCM_32, 1, 0.018) ;
+				break ;
+		}
 
 		test_count++ ;
 		} ;
 	/* Lite remove end */
 
 	if (do_all || strcmp (argv [1], "ogg_vorbis") == 0)
-	{	if (HAVE_EXTERNAL_XIPH_LIBS)
+	{	switch (index)
+		{
+			case 260:
+		if (HAVE_EXTERNAL_XIPH_LIBS)
 		{	/* Don't do lcomp_test_XXX as the errors are too big. */
 			sdlcomp_test_short	("vorbis.oga", SF_FORMAT_OGG | SF_FORMAT_VORBIS, 1, 0.30) ;
 			sdlcomp_test_int	("vorbis.oga", SF_FORMAT_OGG | SF_FORMAT_VORBIS, 1, 0.30) ;
@@ -460,117 +854,260 @@ main (int argc, char *argv [])
 		else
 			puts ("    No Ogg/Vorbis tests because Ogg/Vorbis support was not compiled in.") ;
 
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	/* Lite remove start */
 	if (do_all || strcmp (argv [1], "ircam_ulaw") == 0)
-	{	lcomp_test_short	("ulaw.ircam", SF_ENDIAN_LITTLE | SF_FORMAT_IRCAM | SF_FORMAT_ULAW, 2, 0.04) ;
+	{	switch (index)
+		{
+			case 261:
+		lcomp_test_short	("ulaw.ircam", SF_ENDIAN_LITTLE | SF_FORMAT_IRCAM | SF_FORMAT_ULAW, 2, 0.04) ;
+				break ;
+			case 262:
 		lcomp_test_int		("ulaw.ircam", SF_ENDIAN_BIG	| SF_FORMAT_IRCAM | SF_FORMAT_ULAW, 2, 0.04) ;
+				break ;
+			case 263:
 		lcomp_test_float	("ulaw.ircam", SF_ENDIAN_LITTLE | SF_FORMAT_IRCAM | SF_FORMAT_ULAW, 2, 0.04) ;
+				break ;
+			case 264:
 		lcomp_test_double	("ulaw.ircam", SF_ENDIAN_BIG	| SF_FORMAT_IRCAM | SF_FORMAT_ULAW, 2, 0.04) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || strcmp (argv [1], "ircam_alaw") == 0)
-	{	lcomp_test_short	("alaw.ircam", SF_ENDIAN_LITTLE | SF_FORMAT_IRCAM | SF_FORMAT_ALAW, 2, 0.04) ;
+	{	switch (index)
+		{
+			case 265:
+		lcomp_test_short	("alaw.ircam", SF_ENDIAN_LITTLE | SF_FORMAT_IRCAM | SF_FORMAT_ALAW, 2, 0.04) ;
+				break ;
+			case 266:
 		lcomp_test_int		("alaw.ircam", SF_ENDIAN_BIG	| SF_FORMAT_IRCAM | SF_FORMAT_ALAW, 2, 0.04) ;
+				break ;
+			case 267:
 		lcomp_test_float	("alaw.ircam", SF_ENDIAN_LITTLE | SF_FORMAT_IRCAM | SF_FORMAT_ALAW, 2, 0.04) ;
+				break ;
+			case 268:
 		lcomp_test_double	("alaw.ircam", SF_ENDIAN_BIG	| SF_FORMAT_IRCAM | SF_FORMAT_ALAW, 2, 0.04) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || strcmp (argv [1], "nist_ulaw") == 0)
-	{	lcomp_test_short	("ulaw.nist", SF_ENDIAN_LITTLE	| SF_FORMAT_NIST | SF_FORMAT_ULAW, 2, 0.04) ;
+	{	switch (index)
+		{
+			case 269:
+		lcomp_test_short	("ulaw.nist", SF_ENDIAN_LITTLE	| SF_FORMAT_NIST | SF_FORMAT_ULAW, 2, 0.04) ;
+				break ;
+			case 270:
 		lcomp_test_int		("ulaw.nist", SF_ENDIAN_BIG		| SF_FORMAT_NIST | SF_FORMAT_ULAW, 2, 0.04) ;
+				break ;
+			case 271:
 		lcomp_test_float	("ulaw.nist", SF_ENDIAN_LITTLE	| SF_FORMAT_NIST | SF_FORMAT_ULAW, 2, 0.04) ;
+				break ;
+			case 272:
 		lcomp_test_double	("ulaw.nist", SF_ENDIAN_BIG		| SF_FORMAT_NIST | SF_FORMAT_ULAW, 2, 0.04) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || strcmp (argv [1], "nist_alaw") == 0)
-	{	lcomp_test_short	("alaw.nist", SF_ENDIAN_LITTLE	| SF_FORMAT_NIST | SF_FORMAT_ALAW, 2, 0.04) ;
+	{	switch (index)
+		{
+			case 273:
+		lcomp_test_short	("alaw.nist", SF_ENDIAN_LITTLE	| SF_FORMAT_NIST | SF_FORMAT_ALAW, 2, 0.04) ;
+				break ;
+			case 274:
 		lcomp_test_int		("alaw.nist", SF_ENDIAN_BIG		| SF_FORMAT_NIST | SF_FORMAT_ALAW, 2, 0.04) ;
+				break ;
+			case 275:
 		lcomp_test_float	("alaw.nist", SF_ENDIAN_LITTLE	| SF_FORMAT_NIST | SF_FORMAT_ALAW, 2, 0.04) ;
+				break ;
+			case 276:
 		lcomp_test_double	("alaw.nist", SF_ENDIAN_BIG		| SF_FORMAT_NIST | SF_FORMAT_ALAW, 2, 0.04) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || strcmp (argv [1], "voc_ulaw") == 0)
-	{	lcomp_test_short	("ulaw.voc", SF_FORMAT_VOC | SF_FORMAT_ULAW, 2, 0.04) ;
+	{	switch (index)
+		{
+			case 277:
+		lcomp_test_short	("ulaw.voc", SF_FORMAT_VOC | SF_FORMAT_ULAW, 2, 0.04) ;
+				break ;
+			case 278:
 		lcomp_test_int		("ulaw.voc", SF_FORMAT_VOC | SF_FORMAT_ULAW, 2, 0.04) ;
+				break ;
+			case 279:
 		lcomp_test_float	("ulaw.voc", SF_FORMAT_VOC | SF_FORMAT_ULAW, 2, 0.04) ;
+				break ;
+			case 280:
 		lcomp_test_double	("ulaw.voc", SF_FORMAT_VOC | SF_FORMAT_ULAW, 2, 0.04) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || strcmp (argv [1], "voc_alaw") == 0)
-	{	lcomp_test_short	("alaw.voc", SF_FORMAT_VOC | SF_FORMAT_ALAW, 2, 0.04) ;
+	{	switch (index)
+		{
+			case 281:
+		lcomp_test_short	("alaw.voc", SF_FORMAT_VOC | SF_FORMAT_ALAW, 2, 0.04) ;
+				break ;
+			case 282:
 		lcomp_test_int		("alaw.voc", SF_FORMAT_VOC | SF_FORMAT_ALAW, 2, 0.04) ;
+				break ;
+			case 283:
 		lcomp_test_float	("alaw.voc", SF_FORMAT_VOC | SF_FORMAT_ALAW, 2, 0.04) ;
+				break ;
+			case 284:
 		lcomp_test_double	("alaw.voc", SF_FORMAT_VOC | SF_FORMAT_ALAW, 2, 0.04) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 	/* Lite remove end */
 
 	if (do_all || strcmp (argv [1], "w64_ulaw") == 0)
-	{	lcomp_test_short	("ulaw.w64", SF_FORMAT_W64 | SF_FORMAT_ULAW, 2, 0.04) ;
+	{	switch (index)
+		{
+			case 285:
+		lcomp_test_short	("ulaw.w64", SF_FORMAT_W64 | SF_FORMAT_ULAW, 2, 0.04) ;
+				break ;
+			case 286:
 		lcomp_test_int		("ulaw.w64", SF_FORMAT_W64 | SF_FORMAT_ULAW, 2, 0.04) ;
+				break ;
+			case 287:
 		/* Lite remove start */
 		lcomp_test_float	("ulaw.w64", SF_FORMAT_W64 | SF_FORMAT_ULAW, 2, 0.04) ;
+				break ;
+			case 288:
 		lcomp_test_double	("ulaw.w64", SF_FORMAT_W64 | SF_FORMAT_ULAW, 2, 0.04) ;
 		/* Lite remove end */
 
+				break ;
+			case 289:
 		read_raw_test ("ulaw.w64", SF_FORMAT_W64 | SF_FORMAT_ULAW, 2) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || strcmp (argv [1], "w64_alaw") == 0)
-	{	lcomp_test_short	("alaw.w64", SF_FORMAT_W64 | SF_FORMAT_ALAW, 2, 0.04) ;
+	{	switch (index)
+		{
+			case 290:
+		lcomp_test_short	("alaw.w64", SF_FORMAT_W64 | SF_FORMAT_ALAW, 2, 0.04) ;
+				break ;
+			case 291:
 		lcomp_test_int		("alaw.w64", SF_FORMAT_W64 | SF_FORMAT_ALAW, 2, 0.04) ;
+				break ;
+			case 292:
 		/* Lite remove start */
 		lcomp_test_float	("alaw.w64", SF_FORMAT_W64 | SF_FORMAT_ALAW, 2, 0.04) ;
+				break ;
+			case 293:
 		lcomp_test_double	("alaw.w64", SF_FORMAT_W64 | SF_FORMAT_ALAW, 2, 0.04) ;
 		/* Lite remove end */
+				break ;
+			case 294:
 
 		read_raw_test ("alaw.w64", SF_FORMAT_W64 | SF_FORMAT_ALAW, 2) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	/* Lite remove start */
 	if (do_all || strcmp (argv [1], "w64_ima") == 0)
-	{	lcomp_test_short	("ima.w64", SF_FORMAT_W64 | SF_FORMAT_IMA_ADPCM, 2, 0.18) ;
+	{	switch (index)
+		{
+			case 295:
+		lcomp_test_short	("ima.w64", SF_FORMAT_W64 | SF_FORMAT_IMA_ADPCM, 2, 0.18) ;
+				break ;
+			case 296:
 		lcomp_test_int		("ima.w64", SF_FORMAT_W64 | SF_FORMAT_IMA_ADPCM, 2, 0.18) ;
+				break ;
+			case 297:
 		lcomp_test_float	("ima.w64", SF_FORMAT_W64 | SF_FORMAT_IMA_ADPCM, 2, 0.18) ;
+				break ;
+			case 298:
 		lcomp_test_double	("ima.w64", SF_FORMAT_W64 | SF_FORMAT_IMA_ADPCM, 2, 0.18) ;
 
+				break ;
+			case 299:
 		sdlcomp_test_short	("ima.w64", SF_FORMAT_W64 | SF_FORMAT_IMA_ADPCM, 2, 0.18) ;
+				break ;
+			case 300:
 		sdlcomp_test_int	("ima.w64", SF_FORMAT_W64 | SF_FORMAT_IMA_ADPCM, 2, 0.18) ;
+				break ;
+			case 301:
 		sdlcomp_test_float	("ima.w64", SF_FORMAT_W64 | SF_FORMAT_IMA_ADPCM, 2, 0.18) ;
+				break ;
+			case 302:
 		sdlcomp_test_double	("ima.w64", SF_FORMAT_W64 | SF_FORMAT_IMA_ADPCM, 2, 0.18) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || strcmp (argv [1], "w64_msadpcm") == 0)
-	{	lcomp_test_short	("msadpcm.w64", SF_FORMAT_W64 | SF_FORMAT_MS_ADPCM, 2, 0.36) ;
+	{	switch (index)
+		{
+			case 303:
+		lcomp_test_short	("msadpcm.w64", SF_FORMAT_W64 | SF_FORMAT_MS_ADPCM, 2, 0.36) ;
+				break ;
+			case 304:
 		lcomp_test_int		("msadpcm.w64", SF_FORMAT_W64 | SF_FORMAT_MS_ADPCM, 2, 0.36) ;
+				break ;
+			case 305:
 		lcomp_test_float	("msadpcm.w64", SF_FORMAT_W64 | SF_FORMAT_MS_ADPCM, 2, 0.36) ;
+				break ;
+			case 306:
 		lcomp_test_double	("msadpcm.w64", SF_FORMAT_W64 | SF_FORMAT_MS_ADPCM, 2, 0.36) ;
 
+				break ;
+			case 307:
 		sdlcomp_test_short	("msadpcm.w64", SF_FORMAT_W64 | SF_FORMAT_MS_ADPCM, 2, 0.36) ;
+				break ;
+			case 308:
 		sdlcomp_test_int	("msadpcm.w64", SF_FORMAT_W64 | SF_FORMAT_MS_ADPCM, 2, 0.36) ;
+				break ;
+			case 309:
 		sdlcomp_test_float	("msadpcm.w64", SF_FORMAT_W64 | SF_FORMAT_MS_ADPCM, 2, 0.36) ;
+				break ;
+			case 310:
 		sdlcomp_test_double	("msadpcm.w64", SF_FORMAT_W64 | SF_FORMAT_MS_ADPCM, 2, 0.36) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || strcmp (argv [1], "wve") == 0)
-	{	lcomp_test_short	("psion.wve", SF_FORMAT_WVE | SF_FORMAT_ALAW, 1, 0.04) ;
+	{	switch (index)
+		{
+			case 311:
+		lcomp_test_short	("psion.wve", SF_FORMAT_WVE | SF_FORMAT_ALAW, 1, 0.04) ;
+				break ;
+			case 312:
 		lcomp_test_int		("psion.wve", SF_FORMAT_WVE | SF_FORMAT_ALAW, 1, 0.04) ;
+				break ;
+			case 313:
 		/* Lite remove start */
 		lcomp_test_float	("psion.wve", SF_FORMAT_WVE | SF_FORMAT_ALAW, 1, 0.04) ;
+				break ;
+			case 314:
 		lcomp_test_double	("psion.wve", SF_FORMAT_WVE | SF_FORMAT_ALAW, 1, 0.04) ;
 		/* Lite remove end */
+				break ;
+		}
 		test_count++ ;
 		} ;
 
@@ -578,37 +1115,82 @@ main (int argc, char *argv [])
 
 	if (do_all || strcmp (argv [1], "w64_gsm610") == 0)
 	{	/* Don't do lcomp_test_XXX as the errors are too big. */
+		switch (index)
+		{
+			case 315:
 		sdlcomp_test_short	("gsm610.w64", SF_FORMAT_W64 | SF_FORMAT_GSM610, 1, 0.2) ;
+				break ;
+			case 316:
 		sdlcomp_test_int	("gsm610.w64", SF_FORMAT_W64 | SF_FORMAT_GSM610, 1, 0.2) ;
+				break ;
+			case 317:
 		/* Lite remove start */
 		sdlcomp_test_float	("gsm610.w64", SF_FORMAT_W64 | SF_FORMAT_GSM610, 1, 0.2) ;
+				break ;
+			case 318:
 		sdlcomp_test_double	("gsm610.w64", SF_FORMAT_W64 | SF_FORMAT_GSM610, 1, 0.2) ;
 		/* Lite remove end */
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	/* Lite remove start */
 	if (do_all || strcmp (argv [1], "vox_adpcm") == 0)
-	{	lcomp_test_short	("adpcm.vox", SF_FORMAT_RAW | SF_FORMAT_VOX_ADPCM, 1, 0.17) ;
+	{	switch (index)
+		{
+			case 319:
+		lcomp_test_short	("adpcm.vox", SF_FORMAT_RAW | SF_FORMAT_VOX_ADPCM, 1, 0.17) ;
+				break ;
+			case 320:
 		lcomp_test_int		("adpcm.vox", SF_FORMAT_RAW | SF_FORMAT_VOX_ADPCM, 1, 0.17) ;
+				break ;
+			case 321:
 		lcomp_test_float	("adpcm.vox", SF_FORMAT_RAW | SF_FORMAT_VOX_ADPCM, 1, 0.17) ;
+				break ;
+			case 322:
 		lcomp_test_double	("adpcm.vox", SF_FORMAT_RAW | SF_FORMAT_VOX_ADPCM, 1, 0.17) ;
 
+				break ;
+			case 323:
 		sdlcomp_test_short	("adpcm.vox", SF_FORMAT_RAW | SF_FORMAT_VOX_ADPCM, 1, 0.072) ;
+				break ;
+			case 324:
 		sdlcomp_test_int	("adpcm.vox", SF_FORMAT_RAW | SF_FORMAT_VOX_ADPCM, 1, 0.072) ;
+				break ;
+			case 325:
 		sdlcomp_test_float	("adpcm.vox", SF_FORMAT_RAW | SF_FORMAT_VOX_ADPCM, 1, 0.072) ;
+				break ;
+			case 326:
 		sdlcomp_test_double	("adpcm.vox", SF_FORMAT_RAW | SF_FORMAT_VOX_ADPCM, 1, 0.072) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || strcmp (argv [1], "xi_dpcm") == 0)
-	{	lcomp_test_short	("8bit.xi", SF_FORMAT_XI | SF_FORMAT_DPCM_8, 1, 0.25) ;
+	{	switch (index)
+		{
+			case 327:
+		lcomp_test_short	("8bit.xi", SF_FORMAT_XI | SF_FORMAT_DPCM_8, 1, 0.25) ;
+				break ;
+			case 328:
 		lcomp_test_int		("8bit.xi", SF_FORMAT_XI | SF_FORMAT_DPCM_8, 1, 0.25) ;
 
+				break ;
+			case 329:
 		lcomp_test_short	("16bit.xi", SF_FORMAT_XI | SF_FORMAT_DPCM_16, 1, 0.002) ;
+				break ;
+			case 330:
 		lcomp_test_int		("16bit.xi", SF_FORMAT_XI | SF_FORMAT_DPCM_16, 1, 0.002) ;
+				break ;
+			case 331:
 		lcomp_test_float	("16bit.xi", SF_FORMAT_XI | SF_FORMAT_DPCM_16, 1, 0.002) ;
+				break ;
+			case 332:
 		lcomp_test_double	("16bit.xi", SF_FORMAT_XI | SF_FORMAT_DPCM_16, 1, 0.002) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 	/* Lite remove end */
diff --git a/tests/misc_test.c b/tests/misc_test.c
index d406cdd0..953d4d5a 100644
--- a/tests/misc_test.c
+++ b/tests/misc_test.c
@@ -43,6 +43,7 @@
 #include	<sndfile.h>
 
 #include	"utils.h"
+#include	"defects4cpp.h"
 
 #define	BUFFER_LEN		(1 << 10)
 #define LOG_BUFFER_SIZE	1024
@@ -70,141 +71,236 @@ main (int argc, char *argv [])
 
 	do_all = ! strcmp (argv [1], "all") ;
 
+	int index = defects4cpp_test_index () ;
 	if (do_all || ! strcmp (argv [1], "wav"))
-	{	zero_data_test ("zerolen.wav", SF_FORMAT_WAV | SF_FORMAT_PCM_16) ;
+	{	switch (index)
+		{
+			case 333:
+		zero_data_test ("zerolen.wav", SF_FORMAT_WAV | SF_FORMAT_PCM_16) ;
 		filesystem_full_test (SF_FORMAT_WAV | SF_FORMAT_PCM_16) ;
 		permission_test ("readonly.wav", SF_FORMAT_WAV) ;
 		wavex_amb_test ("ambisonic.wav") ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || ! strcmp (argv [1], "aiff"))
-	{	zero_data_test ("zerolen.aiff", SF_FORMAT_AIFF | SF_FORMAT_PCM_16) ;
+	{	switch (index)
+		{
+			case 334:
+		zero_data_test ("zerolen.aiff", SF_FORMAT_AIFF | SF_FORMAT_PCM_16) ;
 		filesystem_full_test (SF_FORMAT_AIFF | SF_FORMAT_PCM_16) ;
 		permission_test ("readonly.aiff", SF_FORMAT_AIFF) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || ! strcmp (argv [1], "au"))
-	{	zero_data_test ("zerolen.au", SF_FORMAT_AU | SF_FORMAT_PCM_16) ;
+	{	switch (index)
+		{
+			case 335:
+		zero_data_test ("zerolen.au", SF_FORMAT_AU | SF_FORMAT_PCM_16) ;
 		filesystem_full_test (SF_FORMAT_AU | SF_FORMAT_PCM_16) ;
 		permission_test ("readonly.au", SF_FORMAT_AU) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || ! strcmp (argv [1], "caf"))
-	{	zero_data_test ("zerolen.caf", SF_FORMAT_CAF | SF_FORMAT_PCM_16) ;
+	{	switch (index)
+		{
+			case 336:
+		zero_data_test ("zerolen.caf", SF_FORMAT_CAF | SF_FORMAT_PCM_16) ;
 		filesystem_full_test (SF_FORMAT_CAF | SF_FORMAT_PCM_16) ;
 		permission_test ("readonly.caf", SF_FORMAT_CAF) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || ! strcmp (argv [1], "svx"))
-	{	zero_data_test ("zerolen.svx", SF_FORMAT_SVX | SF_FORMAT_PCM_16) ;
+	{	switch (index)
+		{
+			case 337:
+		zero_data_test ("zerolen.svx", SF_FORMAT_SVX | SF_FORMAT_PCM_16) ;
 		filesystem_full_test (SF_FORMAT_SVX | SF_FORMAT_PCM_16) ;
 		permission_test ("readonly.svx", SF_FORMAT_SVX) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || ! strcmp (argv [1], "nist"))
-	{	zero_data_test ("zerolen.nist", SF_FORMAT_NIST | SF_FORMAT_PCM_16) ;
+	{	switch (index)
+		{
+			case 338:
+		zero_data_test ("zerolen.nist", SF_FORMAT_NIST | SF_FORMAT_PCM_16) ;
 		filesystem_full_test (SF_FORMAT_NIST | SF_FORMAT_PCM_16) ;
 		permission_test ("readonly.nist", SF_FORMAT_NIST) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || ! strcmp (argv [1], "paf"))
-	{	zero_data_test ("zerolen.paf", SF_FORMAT_PAF | SF_FORMAT_PCM_16) ;
+	{	switch (index)
+		{
+			case 339:
+		zero_data_test ("zerolen.paf", SF_FORMAT_PAF | SF_FORMAT_PCM_16) ;
 		filesystem_full_test (SF_FORMAT_PAF | SF_FORMAT_PCM_16) ;
 		permission_test ("readonly.paf", SF_FORMAT_PAF) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || ! strcmp (argv [1], "ircam"))
-	{	zero_data_test ("zerolen.ircam", SF_FORMAT_IRCAM | SF_FORMAT_PCM_16) ;
+	{	switch (index)
+		{
+			case 340:
+		zero_data_test ("zerolen.ircam", SF_FORMAT_IRCAM | SF_FORMAT_PCM_16) ;
 		filesystem_full_test (SF_FORMAT_IRCAM | SF_FORMAT_PCM_16) ;
 		permission_test ("readonly.ircam", SF_FORMAT_IRCAM) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || ! strcmp (argv [1], "voc"))
-	{	zero_data_test ("zerolen.voc", SF_FORMAT_VOC | SF_FORMAT_PCM_16) ;
+	{	switch (index)
+		{
+			case 341:
+		zero_data_test ("zerolen.voc", SF_FORMAT_VOC | SF_FORMAT_PCM_16) ;
 		filesystem_full_test (SF_FORMAT_VOC | SF_FORMAT_PCM_16) ;
 		permission_test ("readonly.voc", SF_FORMAT_VOC) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || ! strcmp (argv [1], "w64"))
-	{	zero_data_test ("zerolen.w64", SF_FORMAT_W64 | SF_FORMAT_PCM_16) ;
+	{	switch (index)
+		{
+			case 342:
+		zero_data_test ("zerolen.w64", SF_FORMAT_W64 | SF_FORMAT_PCM_16) ;
 		filesystem_full_test (SF_FORMAT_W64 | SF_FORMAT_PCM_16) ;
 		permission_test ("readonly.w64", SF_FORMAT_W64) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || ! strcmp (argv [1], "rf64"))
-	{	zero_data_test ("zerolen.rf64", SF_FORMAT_RF64 | SF_FORMAT_PCM_16) ;
+	{	switch (index)
+		{
+			case 343:
+		zero_data_test ("zerolen.rf64", SF_FORMAT_RF64 | SF_FORMAT_PCM_16) ;
 		filesystem_full_test (SF_FORMAT_RF64 | SF_FORMAT_PCM_16) ;
 		permission_test ("readonly.rf64", SF_FORMAT_RF64) ;
 		rf64_downgrade_test ("downgrade.wav") ;
 		/* Disable this by default, because it needs to write 4 gigabytes of data. */
 		if (SF_FALSE)
 			rf64_long_file_downgrade_test ("no-downgrade.rf64") ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || ! strcmp (argv [1], "mat4"))
-	{	zero_data_test ("zerolen.mat4", SF_FORMAT_MAT4 | SF_FORMAT_PCM_16) ;
+	{	switch (index)
+		{
+			case 344:
+		zero_data_test ("zerolen.mat4", SF_FORMAT_MAT4 | SF_FORMAT_PCM_16) ;
 		filesystem_full_test (SF_FORMAT_MAT4 | SF_FORMAT_PCM_16) ;
 		permission_test ("readonly.mat4", SF_FORMAT_MAT4) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || ! strcmp (argv [1], "mat5"))
-	{	zero_data_test ("zerolen.mat5", SF_FORMAT_MAT5 | SF_FORMAT_PCM_16) ;
+	{	switch (index)
+		{
+			case 345:
+		zero_data_test ("zerolen.mat5", SF_FORMAT_MAT5 | SF_FORMAT_PCM_16) ;
 		filesystem_full_test (SF_FORMAT_MAT5 | SF_FORMAT_PCM_16) ;
 		permission_test ("readonly.mat5", SF_FORMAT_MAT5) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || ! strcmp (argv [1], "pvf"))
-	{	zero_data_test ("zerolen.pvf", SF_FORMAT_PVF | SF_FORMAT_PCM_16) ;
+	{	switch (index)
+		{
+			case 346:
+		zero_data_test ("zerolen.pvf", SF_FORMAT_PVF | SF_FORMAT_PCM_16) ;
 		filesystem_full_test (SF_FORMAT_PVF | SF_FORMAT_PCM_16) ;
 		permission_test ("readonly.pvf", SF_FORMAT_PVF) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || ! strcmp (argv [1], "htk"))
-	{	zero_data_test ("zerolen.htk", SF_FORMAT_HTK | SF_FORMAT_PCM_16) ;
+	{	switch (index)
+		{
+			case 347:
+		zero_data_test ("zerolen.htk", SF_FORMAT_HTK | SF_FORMAT_PCM_16) ;
 		filesystem_full_test (SF_FORMAT_HTK | SF_FORMAT_PCM_16) ;
 		permission_test ("readonly.htk", SF_FORMAT_HTK) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || ! strcmp (argv [1], "avr"))
-	{	zero_data_test ("zerolen.avr", SF_FORMAT_AVR | SF_FORMAT_PCM_16) ;
+	{	switch (index)
+		{
+			case 348:
+		zero_data_test ("zerolen.avr", SF_FORMAT_AVR | SF_FORMAT_PCM_16) ;
 		filesystem_full_test (SF_FORMAT_AVR | SF_FORMAT_PCM_16) ;
 		permission_test ("readonly.avr", SF_FORMAT_AVR) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || ! strcmp (argv [1], "sds"))
-	{	zero_data_test ("zerolen.sds", SF_FORMAT_SDS | SF_FORMAT_PCM_16) ;
+	{	switch (index)
+		{
+			case 349:
+		zero_data_test ("zerolen.sds", SF_FORMAT_SDS | SF_FORMAT_PCM_16) ;
 		filesystem_full_test (SF_FORMAT_SDS | SF_FORMAT_PCM_16) ;
 		permission_test ("readonly.sds", SF_FORMAT_SDS) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || ! strcmp (argv [1], "mpc2k"))
-	{	zero_data_test ("zerolen.mpc", SF_FORMAT_MPC2K | SF_FORMAT_PCM_16) ;
+	{	switch (index)
+		{
+			case 350:
+		zero_data_test ("zerolen.mpc", SF_FORMAT_MPC2K | SF_FORMAT_PCM_16) ;
 		filesystem_full_test (SF_FORMAT_MPC2K | SF_FORMAT_PCM_16) ;
 		permission_test ("readonly.mpc", SF_FORMAT_MPC2K) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || ! strcmp (argv [1], "ogg"))
-	{	zero_data_test ("zerolen.oga", SF_FORMAT_OGG | SF_FORMAT_VORBIS) ;
+	{	switch (index)
+		{
+			case 294: zero_data_test ("zerolen.oga", SF_FORMAT_OGG | SF_FORMAT_VORBIS) ;
 		/*-filesystem_full_test (SF_FORMAT_OGG | SF_FORMAT_VORBIS) ;-*/
 		permission_test ("readonly.oga", SF_FORMAT_OGG) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
diff --git a/tests/multi_file_test.c b/tests/multi_file_test.c
index 502d15a6..e31b7f00 100644
--- a/tests/multi_file_test.c
+++ b/tests/multi_file_test.c
@@ -39,6 +39,7 @@
 #include <sndfile.h>
 
 #include "utils.h"
+#include "defects4cpp.h"
 
 #define	DATA_LENGTH 		(512)
 
@@ -104,19 +105,35 @@ main (int argc, char **argv)
 		} ;
 
 	do_all = !strcmp (argv [1], "all") ;
+	int index = defects4cpp_test_index () ;
 
 	if (do_all || ! strcmp (argv [1], "wav"))
-	{	multi_file_test	("multi_wav.dat", wav_formats, ARRAY_LEN (wav_formats)) ;
+	{	switch (index)
+		{
+			case 352:
+		multi_file_test	("multi_wav.dat", wav_formats, ARRAY_LEN (wav_formats)) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || ! strcmp (argv [1], "aiff"))
-	{	multi_file_test	("multi_aiff.dat", aiff_formats, ARRAY_LEN (aiff_formats)) ;
+	{	switch (index)
+		{
+			case 353:
+		multi_file_test	("multi_aiff.dat", aiff_formats, ARRAY_LEN (aiff_formats)) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || ! strcmp (argv [1], "au"))
-	{	multi_file_test	("multi_au.dat", au_formats, ARRAY_LEN (au_formats)) ;
+	{	switch (index)
+		{
+			case 354:
+		multi_file_test	("multi_au.dat", au_formats, ARRAY_LEN (au_formats)) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
diff --git a/tests/ogg_test.c b/tests/ogg_test.c
index ba3d8992..bfa7096d 100644
--- a/tests/ogg_test.c
+++ b/tests/ogg_test.c
@@ -32,6 +32,7 @@
 #include	<sndfile.h>
 
 #include	"utils.h"
+#include	"defects4cpp.h"
 
 #define	SAMPLE_RATE			44100
 #define	DATA_LENGTH			(SAMPLE_RATE / 8)
@@ -332,6 +333,9 @@ ogg_stereo_seek_test (const char * filename, int format)
 int
 main (void)
 {
+	switch (defects4cpp_test_index ())
+	{
+		case 355:
 	if (HAVE_EXTERNAL_XIPH_LIBS)
 	{	ogg_short_test () ;
 		ogg_int_test () ;
@@ -344,5 +348,7 @@ main (void)
 	else
 		puts ("    No Ogg/Vorbis tests because Ogg/Vorbis support was not compiled in.") ;
 
+			break ;
+	}
 	return 0 ;
 } /* main */
diff --git a/tests/peak_chunk_test.c b/tests/peak_chunk_test.c
index 3e1aa3d3..7bfa9a6f 100644
--- a/tests/peak_chunk_test.c
+++ b/tests/peak_chunk_test.c
@@ -33,6 +33,7 @@
 #include <sndfile.h>
 
 #include "utils.h"
+#include "defects4cpp.h"
 
 #define	BUFFER_LEN		(1 << 15)
 #define LOG_BUFFER_SIZE	1024
@@ -65,35 +66,56 @@ main (int argc, char *argv [])
 		} ;
 
 	do_all = ! strcmp (argv [1], "all") ;
+	int index = defects4cpp_test_index () ;
 
 	if (do_all || ! strcmp (argv [1], "wav"))
-	{	test_float_peak ("peak_float.wav", SF_FORMAT_WAV | SF_FORMAT_FLOAT) ;
+	{	switch (index)
+		{
+			case 356:
+		test_float_peak ("peak_float.wav", SF_FORMAT_WAV | SF_FORMAT_FLOAT) ;
 		test_float_peak ("peak_float.wavex", SF_FORMAT_WAVEX | SF_FORMAT_FLOAT) ;
 		test_float_peak ("peak_float.rifx", SF_ENDIAN_BIG | SF_FORMAT_WAV | SF_FORMAT_FLOAT) ;
 
 		read_write_peak_test ("rw_peak.wav", SF_FORMAT_WAV | SF_FORMAT_FLOAT) ;
 		read_write_peak_test ("rw_peak.wavex", SF_FORMAT_WAVEX | SF_FORMAT_FLOAT) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || ! strcmp (argv [1], "aiff"))
-	{	test_float_peak	("peak_float.aiff", SF_FORMAT_AIFF | SF_FORMAT_FLOAT) ;
+	{	switch (index)
+		{
+			case 357:
+		test_float_peak	("peak_float.aiff", SF_FORMAT_AIFF | SF_FORMAT_FLOAT) ;
 
 		read_write_peak_test ("rw_peak.aiff", SF_FORMAT_AIFF | SF_FORMAT_FLOAT) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || ! strcmp (argv [1], "caf"))
-	{	test_float_peak	("peak_float.caf", SF_FORMAT_CAF | SF_FORMAT_FLOAT) ;
+	{	switch (index)
+		{
+			case 358:
+		test_float_peak	("peak_float.caf", SF_FORMAT_CAF | SF_FORMAT_FLOAT) ;
 
 		read_write_peak_test ("rw_peak.caf", SF_FORMAT_CAF | SF_FORMAT_FLOAT) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || ! strcmp (argv [1], "rf64"))
-	{	test_float_peak	("peak_float.rf64", SF_FORMAT_RF64 | SF_FORMAT_FLOAT) ;
+	{	switch (index)
+		{
+			case 359:
+		test_float_peak	("peak_float.rf64", SF_FORMAT_RF64 | SF_FORMAT_FLOAT) ;
 
 		read_write_peak_test ("rw_peak.rf64", SF_FORMAT_RF64 | SF_FORMAT_FLOAT) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
diff --git a/tests/raw_test.c b/tests/raw_test.c
index be0f94dc..5c1ccde2 100644
--- a/tests/raw_test.c
+++ b/tests/raw_test.c
@@ -33,6 +33,7 @@
 #include <sndfile.h>
 
 #include "utils.h"
+#include "defects4cpp.h"
 
 #define	BUFFER_LEN		(1 << 10)
 #define LOG_BUFFER_SIZE	1024
@@ -48,8 +49,15 @@ static	short	data [BUFFER_LEN] ;
 int
 main (void)
 {
+	switch (defects4cpp_test_index ())
+	{
+		case 360:
 	raw_offset_test ("offset.raw", SF_FORMAT_PCM_16) ;
+			break ;
+		case 361:
 	bad_raw_test () ;
+			break ;
+	}
 
 	return 0 ;
 } /* main */
diff --git a/tests/sftest.c b/tests/sftest.c
index 497265c9..ec51c286 100644
--- a/tests/sftest.c
+++ b/tests/sftest.c
@@ -27,6 +27,7 @@
 #endif
 
 #include <sndfile.h>
+#include "defects4cpp.h"
 
 #define	BUFFER_SIZE		(1024)
 
@@ -44,6 +45,9 @@ main (int argc, char *argv [])
 		return 0 ;
 		} ;
 
+	switch (defects4cpp_test_index ())
+	{
+		case 362:
 	if (! (file = sf_open (argv [1], SFM_READ, &sfinfo)))
 	{	printf ("sf_open_read failed with error : ") ;
 		puts (sf_strerror (NULL)) ;
@@ -62,6 +66,8 @@ main (int argc, char *argv [])
 
 	sf_close (file) ;
 
+			break ;
+	}
 	return 0 ;
 } /* main */
 
diff --git a/tests/stdin_test.c b/tests/stdin_test.c
index 651614ae..d9938cc6 100644
--- a/tests/stdin_test.c
+++ b/tests/stdin_test.c
@@ -32,6 +32,7 @@
 #include <sndfile.h>
 
 #include "utils.h"
+#include "defects4cpp.h"
 
 #define	BUFFER_LEN		(1 << 16)
 
@@ -53,74 +54,145 @@ main (int argc, char *argv [])
 		} ;
 
 	do_all = ! strcmp (argv [1], "all") ;
+	int index = defects4cpp_test_index () ;
 
 	if (do_all || ! strcmp (argv [1], "raw"))
-	{	stdin_test	(SF_FORMAT_RAW, PIPE_TEST_LEN) ;
+	{	switch (index)
+		{
+			case 363:
+		stdin_test	(SF_FORMAT_RAW, PIPE_TEST_LEN) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || ! strcmp (argv [1], "wav"))
-	{	stdin_test	(SF_FORMAT_WAV, PIPE_TEST_LEN) ;
+	{	switch (index)
+		{
+			case 364:
+		stdin_test	(SF_FORMAT_WAV, PIPE_TEST_LEN) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || ! strcmp (argv [1], "aiff"))
-	{	stdin_test	(SF_FORMAT_AIFF, PIPE_TEST_LEN) ;
+	{	switch (index)
+		{
+			case 365:
+		stdin_test	(SF_FORMAT_AIFF, PIPE_TEST_LEN) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || ! strcmp (argv [1], "au"))
-	{	stdin_test	(SF_FORMAT_AU, PIPE_TEST_LEN) ;
+	{	switch (index)
+		{
+			case 366:
+		stdin_test	(SF_FORMAT_AU, PIPE_TEST_LEN) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || ! strcmp (argv [1], "paf"))
-	{	stdin_test	(SF_FORMAT_PAF, PIPE_TEST_LEN) ;
+	{	switch (index)
+		{
+			case 367:
+		stdin_test	(SF_FORMAT_PAF, PIPE_TEST_LEN) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || ! strcmp (argv [1], "svx"))
-	{	stdin_test	(SF_FORMAT_SVX, PIPE_TEST_LEN) ;
+	{	switch (index)
+		{
+			case 368:
+		stdin_test	(SF_FORMAT_SVX, PIPE_TEST_LEN) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || ! strcmp (argv [1], "nist"))
-	{	stdin_test	(SF_FORMAT_NIST, PIPE_TEST_LEN) ;
+	{	switch (index)
+		{
+			case 369:
+		stdin_test	(SF_FORMAT_NIST, PIPE_TEST_LEN) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || ! strcmp (argv [1], "ircam"))
-	{	stdin_test	(SF_FORMAT_IRCAM, PIPE_TEST_LEN) ;
+	{	switch (index)
+		{
+			case 370:
+		stdin_test	(SF_FORMAT_IRCAM, PIPE_TEST_LEN) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || ! strcmp (argv [1], "voc"))
-	{	stdin_test	(SF_FORMAT_VOC, PIPE_TEST_LEN) ;
+	{	switch (index)
+		{
+			case 371:
+		stdin_test	(SF_FORMAT_VOC, PIPE_TEST_LEN) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || ! strcmp (argv [1], "w64"))
-	{	stdin_test	(SF_FORMAT_W64, PIPE_TEST_LEN) ;
+	{	switch (index)
+		{
+			case 372:
+		stdin_test	(SF_FORMAT_W64, PIPE_TEST_LEN) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || ! strcmp (argv [1], "mat4"))
-	{	stdin_test	(SF_FORMAT_MAT4, PIPE_TEST_LEN) ;
+	{	switch (index)
+		{
+			case 373:
+		stdin_test	(SF_FORMAT_MAT4, PIPE_TEST_LEN) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || ! strcmp (argv [1], "mat5"))
-	{	stdin_test	(SF_FORMAT_MAT5, PIPE_TEST_LEN) ;
+	{	switch (index)
+		{
+			case 374:
+		stdin_test	(SF_FORMAT_MAT5, PIPE_TEST_LEN) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || ! strcmp (argv [1], "pvf"))
-	{	stdin_test	(SF_FORMAT_PVF, PIPE_TEST_LEN) ;
+	{	switch (index)
+		{
+			case 375:
+		stdin_test	(SF_FORMAT_PVF, PIPE_TEST_LEN) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || ! strcmp (argv [1], "htk"))
-	{	stdin_test	(SF_FORMAT_HTK, PIPE_TEST_LEN) ;
+	{	switch (index)
+		{
+			case 376:
+		stdin_test	(SF_FORMAT_HTK, PIPE_TEST_LEN) ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
diff --git a/tests/string_test.c b/tests/string_test.c
index 96b0c547..6095d3d9 100644
--- a/tests/string_test.c
+++ b/tests/string_test.c
@@ -33,6 +33,7 @@
 #include	<sndfile.h>
 
 #include	"utils.h"
+#include	"defects4cpp.h"
 
 #define	BUFFER_LEN			(1 << 10)
 #define LOG_BUFFER_SIZE		1024
@@ -66,31 +67,70 @@ main (int argc, char *argv [])
 		} ;
 
 	do_all = ! strcmp (argv [1], "all") ;
+	int index = defects4cpp_test_index () ;
 
 	if (do_all || ! strcmp (argv [1], "wav"))
-	{	string_start_end_test ("strings.wav", SF_FORMAT_WAV) ;
+	{	switch (index)
+		{
+			case 377:
+		string_start_end_test ("strings.wav", SF_FORMAT_WAV) ;
+				break ;
+			case 378:
 		string_multi_set_test ("multi.wav", SF_FORMAT_WAV) ;
+				break ;
+			case 379:
 		string_rdwr_test ("rdwr.wav", SF_FORMAT_WAV) ;
+				break ;
+			case 380:
 		string_short_rdwr_test ("short_rdwr.wav", SF_FORMAT_WAV) ;
+				break ;
+			case 381:
 		string_rdwr_grow_test ("rdwr_grow.wav", SF_FORMAT_WAV) ;
+				break ;
+			case 382:
 		string_header_update ("header_update.wav", SF_FORMAT_WAV) ;
 
+				break ;
+			case 383:
 		string_start_end_test ("strings.wavex", SF_FORMAT_WAVEX) ;
+				break ;
+			case 384:
 		string_multi_set_test ("multi.wavex", SF_FORMAT_WAVEX) ;
+				break ;
+			case 385:
 		string_rdwr_test ("rdwr.wavex", SF_FORMAT_WAVEX) ;
+				break ;
+			case 386:
 		string_short_rdwr_test ("short_rdwr.wavex", SF_FORMAT_WAVEX) ;
 
+				break ;
+			case 387:
 		string_start_end_test ("strings.rifx", SF_ENDIAN_BIG | SF_FORMAT_WAV) ;
+				break ;
+			case 388:
 		string_multi_set_test ("multi.rifx", SF_ENDIAN_BIG | SF_FORMAT_WAV) ;
+				break ;
+			case 389:
 		string_rdwr_test ("rdwr.rifx", SF_ENDIAN_BIG | SF_FORMAT_WAV) ;
+				break ;
+			case 390:
 		string_short_rdwr_test ("short_rdwr.rifx", SF_ENDIAN_BIG | SF_FORMAT_WAV) ;
 
+				break ;
+			case 391:
 		software_string_test ("software_string.wav") ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || ! strcmp (argv [1], "aiff"))
-	{	string_start_test ("strings.aiff", SF_FORMAT_AIFF) ;
+	{	switch (index)
+		{
+			case 392:
+		string_start_test ("strings.aiff", SF_FORMAT_AIFF) ;
+				break ;
+			case 393:
 		string_start_end_test ("strings.aiff", SF_FORMAT_AIFF) ;
 		/*
 		TODO : Fix src/aiff.c so these tests pass.
@@ -101,29 +141,50 @@ main (int argc, char *argv [])
 		string_header_update ("header_update.aiff", SF_FORMAT_AIFF) ;
 		*/
 
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || ! strcmp (argv [1], "flac"))
-	{	if (HAVE_EXTERNAL_XIPH_LIBS)
+	{	switch (index)
+		{
+			case 394:
+		if (HAVE_EXTERNAL_XIPH_LIBS)
 			string_start_test ("strings.flac", SF_FORMAT_FLAC) ;
 		else
 			puts ("    No FLAC tests because FLAC support was not compiled in.") ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || ! strcmp (argv [1], "ogg"))
-	{	if (HAVE_EXTERNAL_XIPH_LIBS)
+	{	switch (index)
+		{
+			case 395:
+		if (HAVE_EXTERNAL_XIPH_LIBS)
 			string_start_test ("vorbis.oga", SF_FORMAT_OGG) ;
 		else
 			puts ("    No Ogg/Vorbis tests because Ogg/Vorbis support was not compiled in.") ;
+				break ;
+		}
 		test_count++ ;
 		} ;
 
 	if (do_all || ! strcmp (argv [1], "caf"))
-	{	string_start_test ("strings.caf", SF_FORMAT_CAF) ;
+	{	switch (index)
+		{
+			case 396:
+		string_start_test ("strings.caf", SF_FORMAT_CAF) ;
+				break ;
+			case 397:
 		string_start_end_test ("strings.caf", SF_FORMAT_CAF) ;
+				break ;
+			case 398:
 		string_multi_set_test ("multi.caf", SF_FORMAT_CAF) ;
+				break ;
+		}
 		/*
 		TODO : Fix src/caf.c so these tests pass.
 		string_rdwr_test ("rdwr.caf", SF_FORMAT_CAF) ;
@@ -134,9 +195,18 @@ main (int argc, char *argv [])
 		} ;
 
 	if (do_all || ! strcmp (argv [1], "rf64"))
-	{	string_start_test ("strings.rf64", SF_FORMAT_RF64) ;
+	{	switch (index)
+		{
+			case 399:
+		string_start_test ("strings.rf64", SF_FORMAT_RF64) ;
+				break ;
+			case 400:
 		string_start_end_test ("strings.rf64", SF_FORMAT_RF64) ;
+				break ;
+			case 401:
 		string_multi_set_test ("multi.rf64", SF_FORMAT_RF64) ;
+				break ;
+		}
 		/*
 		TODO : Fix src/rf64.c so these tests pass.
 		string_rdwr_test ("rdwr.rf64", SF_FORMAT_RF64) ;
diff --git a/tests/ulaw_test.c b/tests/ulaw_test.c
index 9e0eba9b..7edc1de9 100644
--- a/tests/ulaw_test.c
+++ b/tests/ulaw_test.c
@@ -31,6 +31,7 @@
 #include <sndfile.h>
 
 #include "utils.h"
+#include "defects4cpp.h"
 
 #define	BUFFER_SIZE		(65536)
 
@@ -53,6 +54,9 @@ main (void)
 
 	sf_info_setup (&sfinfo, SF_FORMAT_RAW | SF_FORMAT_ULAW, 44100, 1) ;
 
+	switch (defects4cpp_test_index ())
+	{
+		case 402:
 	if ((file = sf_open (filename, SFM_WRITE, &sfinfo)) == NULL)
 	{	printf ("sf_open_write failed with error : ") ;
 		fflush (stdout) ;
@@ -146,6 +150,8 @@ main (void)
 	puts ("ok") ;
 
 	unlink (filename) ;
+			break ;
+	}
 
 	return 0 ;
 } /* main */
diff --git a/tests/virtual_io_test.c b/tests/virtual_io_test.c
index 1aae063d..fd817a28 100644
--- a/tests/virtual_io_test.c
+++ b/tests/virtual_io_test.c
@@ -30,16 +30,28 @@
 #include <sndfile.h>
 
 #include "utils.h"
+#include "defects4cpp.h"
 
 static void vio_test (const char *fname, int format) ;
 
 int
 main (void)
 {
+	switch (defects4cpp_test_index ())
+	{
+		case 403:
 	vio_test ("vio_pcm16.wav", SF_FORMAT_WAV | SF_FORMAT_PCM_16) ;
+			break ;
+		case 404:
 	vio_test ("vio_pcm24.aiff", SF_FORMAT_AIFF | SF_FORMAT_PCM_24) ;
+			break ;
+		case 405:
 	vio_test ("vio_float.au", SF_FORMAT_AU | SF_FORMAT_FLOAT) ;
+			break ;
+		case 406:
 	vio_test ("vio_pcm24.paf", SF_FORMAT_PAF | SF_FORMAT_PCM_24) ;
+			break ;
+	}
 
 	return 0 ;
 } /* main */
diff --git a/tests/win32_ordinal_test.c b/tests/win32_ordinal_test.c
index 7c9adb15..0f36bc25 100644
--- a/tests/win32_ordinal_test.c
+++ b/tests/win32_ordinal_test.c
@@ -37,6 +37,7 @@
 #include <sys/types.h>
 
 #include "utils.h"
+#include "defects4cpp.h"
 
 #if (defined (WIN32) || defined (_WIN32) || defined (__CYGWIN__))
 #define TEST_WIN32		1
@@ -139,9 +140,14 @@ win32_ordinal_test (void)
 int
 main (void)
 {
+	switch (defects4cpp_test_index ())
+	{
+		case 407:
 #if (TEST_WIN32 && WIN32_TARGET_DLL)
 	win32_ordinal_test () ;
 #endif
+			break ;
+	}
 
 	return 0 ;
 } /* main */
diff --git a/tests/win32_test.c b/tests/win32_test.c
index d0dc6d8e..54007fbe 100644
--- a/tests/win32_test.c
+++ b/tests/win32_test.c
@@ -18,6 +18,7 @@
 
 #include "sfconfig.h"
 #include "sndfile.h"
+#include "defects4cpp.h"
 
 #include <stdio.h>
 #include <stdlib.h>
@@ -88,10 +89,15 @@ main (void)
 		"other OSes just to provide a sanity check.\n"
 		) ;
 
+	switch (defects4cpp_test_index ())
+	{
+		case 408:
 	show_fstat_error () ;
 	show_lseek_error () ;
 	show_stat_fstat_error () ;
 	write_to_closed_file () ;
+			break ;
+	}
 
 	puts ("\n\n") ;
 
-- 
2.25.1

