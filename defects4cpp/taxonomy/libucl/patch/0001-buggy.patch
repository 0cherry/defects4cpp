From 735c930eab60487fcd3e8b33fe46bbe2a944c3b2 Mon Sep 17 00:00:00 2001
From: haku <gentlebuuny@gmail.com>
Date: Wed, 15 Sep 2021 11:39:39 +0900
Subject: [PATCH] buggy

---
 src/ucl_emitter.c    | 11 ++++++-----
 tests/test_msgpack.c | 18 ++++++++++++++++++
 2 files changed, 24 insertions(+), 5 deletions(-)

diff --git a/src/ucl_emitter.c b/src/ucl_emitter.c
index 648cd53..c87a093 100644
--- a/src/ucl_emitter.c
+++ b/src/ucl_emitter.c
@@ -509,9 +509,9 @@ ucl_emit_msgpack_elt (struct ucl_emitter_context *ctx,
 	case UCL_OBJECT:
 		ucl_emitter_print_key_msgpack (print_key, ctx, obj);
 		ucl_emit_msgpack_start_obj (ctx, obj, print_key);
-		it = NULL;
+		it = ucl_object_iterate_new (obj);
 
-		while ((cur = ucl_iterate_object (obj, &it, true)) != NULL) {
+		while ((cur = ucl_object_iterate_safe (it, true)) != NULL) {
 			LL_FOREACH (cur, celt) {
 				ucl_emit_msgpack_elt (ctx, celt, false, true);
 				/* XXX:
@@ -519,21 +519,22 @@ ucl_emit_msgpack_elt (struct ucl_emitter_context *ctx,
 				 * so in case of multi-value keys we are using merely the first
 				 * element ignoring others
 				 */
-				break;
 			}
 		}
 
+		ucl_object_iterate_free (it);
 		break;
 
 	case UCL_ARRAY:
 		ucl_emitter_print_key_msgpack (print_key, ctx, obj);
 		ucl_emit_msgpack_start_array (ctx, obj, print_key);
-		it = NULL;
+		it = ucl_object_iterate_new (obj);
 
-		while ((cur = ucl_iterate_object (obj, &it, true)) != NULL) {
+		while ((cur = ucl_object_iterate_safe (it, true)) != NULL) {
 			ucl_emit_msgpack_elt (ctx, cur, false, false);
 		}
 
+		ucl_object_iterate_free (it);
 		break;
 
 	case UCL_USERDATA:
diff --git a/tests/test_msgpack.c b/tests/test_msgpack.c
index b0a8a04..69a9e03 100644
--- a/tests/test_msgpack.c
+++ b/tests/test_msgpack.c
@@ -22,6 +22,7 @@
  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
+#include <signal.h>
 #include "ucl.h"
 #include "ucl_internal.h"
 #include <ctype.h>
@@ -93,9 +94,26 @@ random_key (size_t *lenptr)
 	return keybuf;
 }
 
+
+static struct sigaction dpp_gcov_sigaction;
+static struct sigaction dpp_orig_sigaction;
+void dpp_sighandler(int signum) {
+#ifdef DPP_ENABLE_GCOV
+  __gcov_flush();
+#endif
+  sigaction(SIGABRT, &dpp_orig_sigaction, NULL);
+  raise(SIGABRT);
+}
+
 int
 main (int argc, char **argv)
 {
+    {
+      dpp_gcov_sigaction.sa_handler = dpp_sighandler;
+      sigemptyset(&dpp_gcov_sigaction.sa_mask);
+      dpp_gcov_sigaction.sa_flags = 0;
+      sigaction(SIGABRT, &dpp_gcov_sigaction, &dpp_orig_sigaction);
+    }
 	int fd, i, j;
 	uint32_t sel;
 	ucl_object_t *obj, *elt;
-- 
2.25.1

