From f060d235bb27955fb147f2a760e8801168905216 Mon Sep 17 00:00:00 2001
From: yckim <yckim@suresofttech.com>
Date: Wed, 15 Sep 2021 09:42:52 +0900
Subject: [PATCH] buggy

---
 crypto/ocsp/ocsp_vfy.c | 15 +++++----------
 crypto/x509/v3_purp.c  |  1 -
 2 files changed, 5 insertions(+), 11 deletions(-)

diff --git a/crypto/ocsp/ocsp_vfy.c b/crypto/ocsp/ocsp_vfy.c
index 0cd59f9221..b148c9e841 100644
--- a/crypto/ocsp/ocsp_vfy.c
+++ b/crypto/ocsp/ocsp_vfy.c
@@ -26,8 +26,7 @@ static int ocsp_req_find_signer(X509 **psigner, OCSP_REQUEST *req,
                                 unsigned long flags);
 
 /* Returns 1 on success, 0 on failure, or -1 on fatal error */
-static int ocsp_verify_signer(X509 *signer, int response,
-                              X509_STORE *st, unsigned long flags,
+static int ocsp_verify_signer(X509 *signer, X509_STORE *st, unsigned long flags,
                               STACK_OF(X509) *untrusted, STACK_OF(X509) **chain)
 {
     X509_STORE_CTX *ctx = X509_STORE_CTX_new();
@@ -42,17 +41,13 @@ static int ocsp_verify_signer(X509 *signer, int response,
         OCSPerr(0, ERR_R_X509_LIB);
         goto end;
     }
-    if ((vp = X509_STORE_CTX_get0_param(ctx)) == NULL)
-        goto end;
-    if ((flags & OCSP_PARTIAL_CHAIN) != 0)
+    if ((flags & OCSP_PARTIAL_CHAIN) != 0
+            && (vp = X509_STORE_CTX_get0_param(ctx)) != NULL)
         X509_VERIFY_PARAM_set_flags(vp, X509_V_FLAG_PARTIAL_CHAIN);
-    if (response
-            && X509_get_ext_by_NID(signer, NID_id_pkix_OCSP_noCheck, -1) >= 0)
         /*
          * Locally disable revocation status checking for OCSP responder cert.
          * Done here for CRLs; TODO should be done also for OCSP-based checks.
          */
-        X509_VERIFY_PARAM_clear_flags(vp, X509_V_FLAG_CRL_CHECK);
     X509_STORE_CTX_set_purpose(ctx, X509_PURPOSE_OCSP_HELPER);
     X509_STORE_CTX_set_trust(ctx, X509_TRUST_OCSP_REQUEST);
     /* TODO: why is X509_TRUST_OCSP_REQUEST set? Seems to get ignored. */
@@ -126,7 +121,7 @@ int OCSP_basic_verify(OCSP_BASICRESP *bs, STACK_OF(X509) *certs,
         } else {
             untrusted = bs->certs;
         }
-        ret = ocsp_verify_signer(signer, 1, st, flags, untrusted, &chain);
+        ret = ocsp_verify_signer(signer, st, flags, untrusted, &chain);
         if (ret <= 0)
             goto end;
         if ((flags & OCSP_NOCHECKS) != 0) {
@@ -399,7 +394,7 @@ int OCSP_request_verify(OCSP_REQUEST *req, STACK_OF(X509) *certs,
         return 0; /* not returning 'ret' here for backward compatibility*/
     if ((flags & OCSP_NOVERIFY) != 0)
         return 1;
-    return ocsp_verify_signer(signer, 0, store, flags,
+    return ocsp_verify_signer(signer, store, flags,
                               (flags & OCSP_NOCHAIN) != 0 ?
                               NULL : req->optionalSignature->certs, NULL) > 0;
     /* using '> 0' here to avoid breaking backward compatibility returning -1 */
diff --git a/crypto/x509/v3_purp.c b/crypto/x509/v3_purp.c
index fd512419f0..8b0dfd9759 100644
--- a/crypto/x509/v3_purp.c
+++ b/crypto/x509/v3_purp.c
@@ -283,7 +283,6 @@ int X509_supported_extension(X509_EXTENSION *ex)
         NID_sbgp_ipAddrBlock,   /* 290 */
         NID_sbgp_autonomousSysNum, /* 291 */
 #endif
-        NID_id_pkix_OCSP_noCheck, /* 369 */
         NID_policy_constraints, /* 401 */
         NID_proxyCertInfo,      /* 663 */
         NID_name_constraints,   /* 666 */
-- 
2.23.0.windows.1

